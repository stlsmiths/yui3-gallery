YUI.add("yuidoc-meta", function(Y) {
   Y.YUIDoc = { meta: {
    "classes": [
        "Y.DataTable.Paginator"
    ],
    "modules": [
        "datatable"
    ],
    "allModules": [
        {
            "displayName": "datatable",
            "name": "datatable",
            "description": "Defines a Y.DataTable class extension to add capability to support a Paginator View-Model and allow\npaging of actively displayed data within the DT instance.\n\nWorks with either client-side pagination (i.e. local data, usually in form of JS Array) or\nin conjunction with remote server-side pagination, via either DataSource or ModelSync.REST.\n\nAllows for dealing with sorted data, wherein the local data is sorted in place, and in the case of remote data the \"sortBy\"\nattribute is passed to the remote server.\n\n<h4>Usage</h4>\n\n    var dtable = new Y.DataTable({\n        columns:    [ 'firstName','lastName','state','age', 'grade' ],\n        data:       enrollment.records,\n        scrollable: 'y',\n        height:     '450px',\n        sortBy:     [{lastName:'asc'}, {grade:-1}],\n        paginator:  new PaginatorView({\n           model: \t\tnew PaginatorModel({itemsPerPage:50, page:3}),\n           container:\t'#pagContA'\n        }),\n        resizePaginator: true\n    });\n\n<h4>Client OR Server Pagination</h4>\n\nPagination can either be done solely on the \"client\", or from a remote \"server\".  The attribute [paginationSource](#attr_paginationSource)\nis set to either of these strings.  The trivial case is where the data is coming locally (i.e. in a JS array) and the user requests\n\"client\" pagination.  Likewise when pagination occurs solely on a remote device, \"server\" is very straightforward.  This module also\nprovides a middle-path where the initial payload is obtained from a remote source, and then after loading, pagination is to be done\non the \"client\" (see below).\n\nA determination of whether the source of `data` is either \"local\" data (i.e. a Javascript Array or Y.ModelList), or is\nprovided from a server (either DataSource or ModelSync.REST) is performed within the method [_afterDataReset](#method__afterDataReset).\n\nFor server-side pagination, the OUTGOING request must include (as a minimum);  `page` and `itemsPerPage` querystring\nparameters (all others, including `sortBy` are optional).  Likewise, the INCOMING (returned response) must include as \"meta-data\" at\nleast `totalItems`, plus any other PaginatorModel attributes.   The key item within the returned response is `totalItems'. If the returned\nresponse does not contain `totalItems` metadata <b>the PaginatorView will not be shown!</b>.\n\nWe have provided an attribute [serverPaginationMap](#attr_serverPaginationMap) as an object hash to translate both outgoing\nquerystring parameter names and incoming (response returned) parameter names in order to match what is expected by the\nPaginatorModel.  Please see this attribute or the examples for how to utilize this map for your use case.\n\n<h4>Loading the \"data\" For a Page</h4>\nOnce the \"source of data\" is known, the method [processPageRequest](#method_processPageRequest) fires on a `pageChange`.\n\nFor the case of \"client\" pagination, an internal buffer [_mlistArray](#property__mlistArray) is set to hold all of the data.\nEach page request in this circumstance involves using simply Array slicing methods from the buffer.\n(See method [paginatorLocalRequest](#method_paginatorLocalRequest) for details)\n\nThe case of \"remote data\" (from a server) is actually more straightforward.  For the case of ModelSync.REST remote data the\ncurrent \"pagination state\" is processed through the [serverPaginationMap](#attr_serverPaginationMap) hash (to convert to\nqueryString format) and the ModelList.load() method is called.  For the case of a DataSource, a similar approach is used where\nthe [requestStringTemplate](#attr_requestStringTemplate) is read, processed through the serverPaginationMap hash and a\ndatasource.load() request is fired.\n(See methods [paginatorMLRequest](#method_paginatorMLRequest) and [paginatorDSRequest](#method_paginatorDSRequest)for details)\n\nThis extension DOES NOT \"cache\" pages for remote data, it simply inserts the full returned data into the DT.  So as a consequence,\na pagination state change for remote data involves a simple request sent to the server source (either DataSource or ModelSync.REST)\nand the response results are loaded in the DT as in any other \"response\".\n\n<h4>Loading the \"initial data\" remotely - then using \"client\" Pagination</h4>\n\nA recent revision to this module now allows for the initial payload of data that constitutes the entire \"dataset\" to be loaded\nfrom a remote source (by the standard DataSource or ModelSync.REST methods).\n\nBy setting the [paginationSource](#attr_paginationSource) attribute to \"client\", this module proceeds with paginating the DataTable\nas if the data was initially set within the \"data\" property.\n\n<h4>Sorting</h4>\n\nThis module supports sorting for both client and server side Pagination.  Note that sorting for \"server-side\" is required to be\naccomplished by the remote server; the \"sortBy\" settings are passed in a remote page request.\n\nFor client-side Pagination the task is a more complex.  We utilize an internal buffer to store the client-side data, so therefore\nthe requested \"sorting\" is accomplished internally within method [paginatorSortLocalData](#method_paginatorSortLocalData).\nBasic \"client-side\" sorting is supported in this method (limited to one sort key at a time).\nImplementers may override this method for more complex sorting needs."
        }
    ]
} };
});