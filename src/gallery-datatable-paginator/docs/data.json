{
    "project": {},
    "files": {
        "js/datatable-paginator.js": {
            "name": "js/datatable-paginator.js",
            "modules": {
                "datatable": 1
            },
            "classes": {
                "Y.DataTable.Paginator": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "datatable": {
            "name": "datatable",
            "submodules": {},
            "classes": {
                "Y.DataTable.Paginator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/datatable-paginator.js",
            "line": 1,
            "description": "Defines a Y.DataTable class extension to add capability to support a Paginator View-Model and allow\npaging of actively displayed data within the DT instance.\n\nWorks with either client-side pagination (i.e. local data, usually in form of JS Array) or\nin conjunction with remote server-side pagination, via either DataSource or ModelSync.REST.\n\nAllows for dealing with sorted data, wherein the local data is sorted in place, and in the case of remote data the \"sortBy\"\nattribute is passed to the remote server.\n\n<h4>Usage</h4>\n\n    var dtable = new Y.DataTable({\n        columns:    [ 'firstName','lastName','state','age', 'grade' ],\n        data:       enrollment.records,\n        scrollable: 'y',\n        height:     '450px',\n        sortBy:     [{lastName:'asc'}, {grade:-1}],\n        paginator:  new PaginatorView({\n           model: \t\tnew PaginatorModel({itemsPerPage:50, page:3}),\n           container:\t'#pagContA'\n        }),\n        resizePaginator: true\n    });\n\n<h4>Client OR Server Pagination</h4>\n\nPagination can either be done solely on the \"client\", or from a remote \"server\".  The attribute [paginationSource](#attr_paginationSource)\nis set to either of these strings.  The trivial case is where the data is coming locally (i.e. in a JS array) and the user requests\n\"client\" pagination.  Likewise when pagination occurs solely on a remote device, \"server\" is very straightforward.  This module also\nprovides a middle-path where the initial payload is obtained from a remote source, and then after loading, pagination is to be done\non the \"client\" (see below).\n\nA determination of whether the source of `data` is either \"local\" data (i.e. a Javascript Array or Y.ModelList), or is\nprovided from a server (either DataSource or ModelSync.REST) is performed within the method [_afterDataReset](#method__afterDataReset).\n\nFor server-side pagination, the OUTGOING request must include (as a minimum);  `page` and `itemsPerPage` querystring\nparameters (all others, including `sortBy` are optional).  Likewise, the INCOMING (returned response) must include as \"meta-data\" at\nleast `totalItems`, plus any other PaginatorModel attributes.   The key item within the returned response is `totalItems'. If the returned\nresponse does not contain `totalItems` metadata <b>the PaginatorView will not be shown!</b>.\n\nWe have provided an attribute [serverPaginationMap](#attr_serverPaginationMap) as an object hash to translate both outgoing\nquerystring parameter names and incoming (response returned) parameter names in order to match what is expected by the\nPaginatorModel.  Please see this attribute or the examples for how to utilize this map for your use case.\n\n<h4>Loading the \"data\" For a Page</h4>\nOnce the \"source of data\" is known, the method [processPageRequest](#method_processPageRequest) fires on a `pageChange`.\n\nFor the case of \"client\" pagination, an internal buffer [_mlistArray](#property__mlistArray) is set to hold all of the data.\nEach page request in this circumstance involves using simply Array slicing methods from the buffer.\n(See method [paginatorLocalRequest](#method_paginatorLocalRequest) for details)\n\nThe case of \"remote data\" (from a server) is actually more straightforward.  For the case of ModelSync.REST remote data the\ncurrent \"pagination state\" is processed through the [serverPaginationMap](#attr_serverPaginationMap) hash (to convert to\nqueryString format) and the ModelList.load() method is called.  For the case of a DataSource, a similar approach is used where\nthe [requestStringTemplate](#attr_requestStringTemplate) is read, processed through the serverPaginationMap hash and a\ndatasource.load() request is fired.\n(See methods [paginatorMLRequest](#method_paginatorMLRequest) and [paginatorDSRequest](#method_paginatorDSRequest)for details)\n\nThis extension DOES NOT \"cache\" pages for remote data, it simply inserts the full returned data into the DT.  So as a consequence,\na pagination state change for remote data involves a simple request sent to the server source (either DataSource or ModelSync.REST)\nand the response results are loaded in the DT as in any other \"response\".\n\n<h4>Loading the \"initial data\" remotely - then using \"client\" Pagination</h4>\n\nA recent revision to this module now allows for the initial payload of data that constitutes the entire \"dataset\" to be loaded\nfrom a remote source (by the standard DataSource or ModelSync.REST methods).\n\nBy setting the [paginationSource](#attr_paginationSource) attribute to \"client\", this module proceeds with paginating the DataTable\nas if the data was initially set within the \"data\" property.\n\n<h4>Sorting</h4>\n\nThis module supports sorting for both client and server side Pagination.  Note that sorting for \"server-side\" is required to be\naccomplished by the remote server; the \"sortBy\" settings are passed in a remote page request.\n\nFor client-side Pagination the task is a more complex.  We utilize an internal buffer to store the client-side data, so therefore\nthe requested \"sorting\" is accomplished internally within method [paginatorSortLocalData](#method_paginatorSortLocalData).\nBasic \"client-side\" sorting is supported in this method (limited to one sort key at a time).\nImplementers may override this method for more complex sorting needs.",
            "extends": "Y.DataTable",
            "version": "1.0.1",
            "since": "3.6.0",
            "author": "Todd Smith"
        }
    },
    "classes": {
        "Y.DataTable.Paginator": {
            "name": "Y.DataTable.Paginator",
            "shortname": "Y.DataTable.Paginator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "DataTable"
            ],
            "module": "datatable",
            "namespace": "",
            "file": "js/datatable-paginator.js",
            "line": 1,
            "description": "Defines a Y.DataTable class extension to add capability to support a Paginator View-Model and allow\npaging of actively displayed data within the DT instance.\n\nWorks with either client-side pagination (i.e. local data, usually in form of JS Array) or\nin conjunction with remote server-side pagination, via either DataSource or ModelSync.REST.\n\nAllows for dealing with sorted data, wherein the local data is sorted in place, and in the case of remote data the \"sortBy\"\nattribute is passed to the remote server.\n\n<h4>Usage</h4>\n\n    var dtable = new Y.DataTable({\n        columns:    [ 'firstName','lastName','state','age', 'grade' ],\n        data:       enrollment.records,\n        scrollable: 'y',\n        height:     '450px',\n        sortBy:     [{lastName:'asc'}, {grade:-1}],\n        paginator:  new PaginatorView({\n           model: \t\tnew PaginatorModel({itemsPerPage:50, page:3}),\n           container:\t'#pagContA'\n        }),\n        resizePaginator: true\n    });\n\n<h4>Client OR Server Pagination</h4>\n\nPagination can either be done solely on the \"client\", or from a remote \"server\".  The attribute [paginationSource](#attr_paginationSource)\nis set to either of these strings.  The trivial case is where the data is coming locally (i.e. in a JS array) and the user requests\n\"client\" pagination.  Likewise when pagination occurs solely on a remote device, \"server\" is very straightforward.  This module also\nprovides a middle-path where the initial payload is obtained from a remote source, and then after loading, pagination is to be done\non the \"client\" (see below).\n\nA determination of whether the source of `data` is either \"local\" data (i.e. a Javascript Array or Y.ModelList), or is\nprovided from a server (either DataSource or ModelSync.REST) is performed within the method [_afterDataReset](#method__afterDataReset).\n\nFor server-side pagination, the OUTGOING request must include (as a minimum);  `page` and `itemsPerPage` querystring\nparameters (all others, including `sortBy` are optional).  Likewise, the INCOMING (returned response) must include as \"meta-data\" at\nleast `totalItems`, plus any other PaginatorModel attributes.   The key item within the returned response is `totalItems'. If the returned\nresponse does not contain `totalItems` metadata <b>the PaginatorView will not be shown!</b>.\n\nWe have provided an attribute [serverPaginationMap](#attr_serverPaginationMap) as an object hash to translate both outgoing\nquerystring parameter names and incoming (response returned) parameter names in order to match what is expected by the\nPaginatorModel.  Please see this attribute or the examples for how to utilize this map for your use case.\n\n<h4>Loading the \"data\" For a Page</h4>\nOnce the \"source of data\" is known, the method [processPageRequest](#method_processPageRequest) fires on a `pageChange`.\n\nFor the case of \"client\" pagination, an internal buffer [_mlistArray](#property__mlistArray) is set to hold all of the data.\nEach page request in this circumstance involves using simply Array slicing methods from the buffer.\n(See method [paginatorLocalRequest](#method_paginatorLocalRequest) for details)\n\nThe case of \"remote data\" (from a server) is actually more straightforward.  For the case of ModelSync.REST remote data the\ncurrent \"pagination state\" is processed through the [serverPaginationMap](#attr_serverPaginationMap) hash (to convert to\nqueryString format) and the ModelList.load() method is called.  For the case of a DataSource, a similar approach is used where\nthe [requestStringTemplate](#attr_requestStringTemplate) is read, processed through the serverPaginationMap hash and a\ndatasource.load() request is fired.\n(See methods [paginatorMLRequest](#method_paginatorMLRequest) and [paginatorDSRequest](#method_paginatorDSRequest)for details)\n\nThis extension DOES NOT \"cache\" pages for remote data, it simply inserts the full returned data into the DT.  So as a consequence,\na pagination state change for remote data involves a simple request sent to the server source (either DataSource or ModelSync.REST)\nand the response results are loaded in the DT as in any other \"response\".\n\n<h4>Loading the \"initial data\" remotely - then using \"client\" Pagination</h4>\n\nA recent revision to this module now allows for the initial payload of data that constitutes the entire \"dataset\" to be loaded\nfrom a remote source (by the standard DataSource or ModelSync.REST methods).\n\nBy setting the [paginationSource](#attr_paginationSource) attribute to \"client\", this module proceeds with paginating the DataTable\nas if the data was initially set within the \"data\" property.\n\n<h4>Sorting</h4>\n\nThis module supports sorting for both client and server side Pagination.  Note that sorting for \"server-side\" is required to be\naccomplished by the remote server; the \"sortBy\" settings are passed in a remote page request.\n\nFor client-side Pagination the task is a more complex.  We utilize an internal buffer to store the client-side data, so therefore\nthe requested \"sorting\" is accomplished internally within method [paginatorSortLocalData](#method_paginatorSortLocalData).\nBasic \"client-side\" sorting is supported in this method (limited to one sort key at a time).\nImplementers may override this method for more complex sorting needs."
        }
    },
    "classitems": [
        {
            "file": "js/datatable-paginator.js",
            "line": 96,
            "description": "Adds a paginator view (specifically Y.PaginatorView) instance to the DataTable.",
            "itemtype": "attribute",
            "name": "paginator",
            "type": "Y.View",
            "default": "null",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 108,
            "description": "Defines a hash to convert expected PaginatorModel attributes to outgoing request queryString\nor returned (incoming response) meta data back to PaginatorModel attributes.",
            "example": [
                "\n         serverPaginationMap : {\n             totalItems :    'totalRows',\n             page :          {toServer:'requestedPage', fromServer:'returnedPageNo'},\n             itemIndexStart: 'startRecord',\n             itemsPerPage:   'numPageRows'\n         }\n\n         // would map to an outgoing request of (for url:/data/orders) ;\n         /data/orders/{cust_no}?requestedPage={requestedPage}&numPageRows={numPageRows}\n\n         // for a JSON response of ...\n         { \"reply\":\"ok\", \"totalRows\":478, \"returnedPageNo\":17, \"startRecord\":340, \"numPageRows\":20,\n           \"results\":[ {...} 20 total rows returned {...}] }\n\nFor default value, see [_defPagMap](#method__defPagMap)"
            ],
            "itemtype": "attribute",
            "name": "serverPaginationMap",
            "type": "{Object}",
            "default": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 139,
            "description": "Attribute to track the full pagination state (i.e. the PaginatorModel) attributes all in one object.\nAlso includes the `sortBy` property internally.",
            "itemtype": "attribute",
            "name": "paginationState",
            "type": "Object",
            "default": "unset",
            "beta": 1,
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 154,
            "description": "(SERVER DataSource only!)\nIncludes the request queryString for a DataSource request (only!), which contains the pagination\nreplacement strings to be appended to the DataSource's \"source\" string.",
            "example": [
                "\n         requestStringTemplate:  \"?currentPage={page}&pageRows={itemsPerPage}&sorting={sortBy}\"\n\nNote, the replacement parameters within this template should match the settings from the PaginatorModel\nattributes.\n\nIn cases where your server expects differing query parameters, you can utilize ATTR [serverPaginationMap](#attr_serverPaginationMap)."
            ],
            "itemtype": "attribute",
            "name": "requestStringTemplate",
            "type": "String",
            "default": "\"\"",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 176,
            "description": "Flag to indicate if the Paginator container should be re-sized to the DataTable size\nafter rendering is complete.\n\nThis attribute works best with a \"bar\" type of Paginator that is intended to look integral with a DataTable.",
            "itemtype": "attribute",
            "name": "paginatorResize",
            "type": "Boolean",
            "default": "false",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 191,
            "description": "A flag to indicate if client-side pagination or server-side pagination is desired.\nSpecifically, this attribute determines whether Page Requests are sent remotely or are\nhandled internally.\n\nRecognized settings are \"client\" (the default) or \"server\".\n\nNote: In cases where the initial payload of data is obtained from a DS or ModelSyncREST\nserver, but after data is received the user desires \"client-side\" pagination, this would\nbe set to \"client\".",
            "itemtype": "attribute",
            "name": "paginationSource",
            "type": "String",
            "default": "null",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 215,
            "description": "Holder for the \"original\" un-paged data that the DataTable was based upon.\n\nThis property is stored as an Array, from the original \"data\" ModelList, only used\nfor case of \"local\" data, is sliced as needed to re-set each data Page.\n\nPopulated in method [_afterDataReset](#method__afterDataReset)",
            "itemtype": "property",
            "name": "_mlistArray",
            "type": "Array",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 233,
            "description": "Placeholder for a text flag indicating the original provider of \"data\" for this DataTable,\n this is set initially in method _afterDataReset.\n\nSet to either 'local', 'ds' or 'mlist' in method [_afterDataReset](#method__afterDataReset)\n\nPopulated in _afterDataReset.  Utilized in processPageRequest",
            "itemtype": "property",
            "name": "_pagDataSrc",
            "type": "String",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 250,
            "description": "Array to hold Event handles to allow for cleanup in the destructor",
            "itemtype": "property",
            "name": "_evtHandlesPag",
            "type": "Array",
            "default": "null",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 260,
            "description": "A convenience property holder for the DataTable's \"paginator\" attribute (the Paginator-View instance).",
            "itemtype": "property",
            "name": "paginator",
            "type": "{Y.PaginatorView|View}",
            "default": "null",
            "access": "public",
            "tagname": "",
            "since": "3.6.0",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 271,
            "description": "A convenience property holder for the Paginator-View's Model attribute.",
            "itemtype": "property",
            "name": "pagModel",
            "type": "{Y.PaginatorModel|Model}",
            "default": "null",
            "access": "public",
            "tagname": "",
            "since": "3.6.0",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 285,
            "description": "This initializer sets up the listeners related to the original DataTable instance, to the\n PaginatorModel changes and related to the underlying \"data\" attribute the DT is based upon.",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 332,
            "description": "Destructor to clean up listener event handlers and the internal storage buffer.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 362,
            "description": "Primary workhorse method that is fired when the Paginator \"page\" changes,\nand returns a new subset of data for the DT (local data)\nor sends a new request to a remote source to populate the DT (remote data)",
            "itemtype": "method",
            "name": "processPageRequest",
            "params": [
                {
                    "name": "page_no",
                    "description": "Current page number to change to",
                    "type": "Integer"
                },
                {
                    "name": "pag_state",
                    "description": "Pagination state object (this is NOT populated in local .. non-server type pagination) including;",
                    "type": "Object",
                    "props": [
                        {
                            "name": "indexStart",
                            "description": "Starting index returned from server response",
                            "type": "Integer"
                        },
                        {
                            "name": "numRecs",
                            "description": "Count of records returned from the response",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "access": "public",
            "tagname": "",
            "return": {
                "description": "nothing"
            },
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 459,
            "description": "Fires after the DataTable-Paginator updates the page data and/or sends the remote request for more data",
            "itemtype": "event",
            "name": "pageUpdate",
            "params": [
                {
                    "name": "pagStatus",
                    "description": "containing following;",
                    "type": "Object",
                    "props": [
                        {
                            "name": "pag_state",
                            "description": "Of Paginator Model `getAttrs()` as an Object",
                            "type": "Object"
                        },
                        {
                            "name": "view",
                            "description": "Instance of the Paginator View",
                            "type": "View"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 467,
            "description": "Utility method that fires a request for the currently active page, effectively\n\"refreshing\" the Paginator UI",
            "itemtype": "method",
            "name": "refreshPaginator",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 478,
            "description": "Overrideable method to send the Pagination request to the ModelList for the \"load\" request.\nThe default method simply passes the url_object (created/populated within method [processPageRequest](#method_processPageRequest))\nto the ModelList's \"load\" method (assuming ModelSync.REST or other handling is provided).\n\nImplementers are free to override this method to incorporate their own remote request.",
            "itemtype": "method",
            "name": "paginatorMLRequest",
            "params": [
                {
                    "name": "url_object",
                    "description": "The pagination URL request object passed to the ModelList's sync layer",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 493,
            "description": "Overrideable method to send the Pagination request to the DataSource.\nBy default the constructed `requestString` is sent, but implementers can override this method to\ninclude additional information in their remote request.",
            "itemtype": "method",
            "name": "paginatorDSRequest",
            "params": [
                {
                    "name": "requestString",
                    "description": "DataSource remote request string sent via DataTable.datasource load method",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 506,
            "description": "Overrideable method to handle a Pagination request when using \"local\" data.  This method\ntakes care of slicing and resetting the \"local data\" array and re-syncing the DataTable.",
            "itemtype": "method",
            "name": "paginatorLocalRequest",
            "params": [
                {
                    "name": "page_no",
                    "description": "Page number requested",
                    "type": "Number"
                },
                {
                    "name": "istart",
                    "description": "Calculated starting index for this page number",
                    "type": "Number"
                },
                {
                    "name": "iend",
                    "description": "Calculated ending index for this page number",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 524,
            "description": "Method to sync the container for the paginator View with the underlying DataTable\n 'table' element.\n\n Unfortunately, there isn't a distinct, definitive 'render' complete event due to\n  DT's complex rendering, so I use a timer function to attempt a resize.",
            "itemtype": "method",
            "name": "resizePaginator",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 541,
            "description": "Method to re-initialize the original entire dataset when used with \"client\" pagination.",
            "itemtype": "method",
            "name": "resetLocalData",
            "params": [
                {
                    "name": "data",
                    "description": "Data to be reset to ... either as a JS Array or a Y.ModelList",
                    "type": "Array|ModelList"
                }
            ],
            "access": "public",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 564,
            "description": "Method that sorts the buffered local data (in _mlistArray) after a DataTable\nsort event is fired.\n\nTODO: ONLY WORKS FOR single column sort presently and for \"known\" sorting\nmethods (i.e. string, number, date)\n\nImplementers can override this method to incorporate more advanced sorting",
            "itemtype": "method",
            "name": "paginatorSortLocalData",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 617,
            "description": "Method to return the entire internal buffer array used for client-side pagination.\nNote: This only applies to client-side pagination",
            "itemtype": "method",
            "name": "getLocalData",
            "return": {
                "description": "data Array of internal buffer used for client-side pagination",
                "type": "Array"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 629,
            "description": "Helper method that responds to DT's \"data:add\" event (via .addRow/addRows), by adding\nthe new record (in o.newVal) to the internal buffer and refreshing the Paginator UI.\n\nNOTE: This only applies to FOR LOCAL DATA ONLY, for client-side pagination\n\nImplementers are welcome to override this method with their own !!",
            "itemtype": "method",
            "name": "addLocalData",
            "params": [
                {
                    "name": "o",
                    "description": "Event object from the ModelList.add event",
                    "type": "Object"
                },
                {
                    "name": "pgIndex",
                    "description": "Calculated absolute index of the record within the entire dataset",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 665,
            "description": "Helper method that responds to DT's \"data:remove\" event (invoked by .removeRow), by adding\nthe new record (in o.newVal) to the internal buffer and refreshing the Paginator UI.\n\nNOTE: This only applies to FOR LOCAL DATA ONLY, for client-side pagination\n\nImplementers are welcome to override this method with their own !!",
            "itemtype": "method",
            "name": "removeLocalData",
            "params": [
                {
                    "name": "o",
                    "description": "Event object from the ModelList.remove event",
                    "type": "Object"
                },
                {
                    "name": "pgIndex",
                    "description": "Calculated absolute index of the record within the entire dataset",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 689,
            "description": "Overridable method that fires for server-side pagination when a data item is added\nvia either \"data:add\" or .addRow.\n\nIt is up to implementers to either override this method or provide a mechanism\n(why not than ModelSync.REST!) to respond to the provided event.",
            "itemtype": "method",
            "name": "addRemoteData",
            "params": [
                {
                    "name": "o",
                    "description": "Change event payload object from ModelList's .add method",
                    "type": "Object"
                },
                {
                    "name": "pgIndex",
                    "description": "Calculated absolute index of the record within the entire dataset",
                    "type": "Number"
                }
            ],
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 707,
            "description": "Overridable method that fires for server-side pagination when a data item is deleted\nvia either \"data:remove\" or .removeRow.\n\nIt is up to implementers to either override this method or provide a mechanism\n(why not than ModelSync.REST!) to respond to the provided event.",
            "itemtype": "method",
            "name": "removeRemoteData",
            "params": [
                {
                    "name": "o",
                    "description": "Change event payload object from ModelList's .remove method",
                    "type": "Object"
                },
                {
                    "name": "pgIndex",
                    "description": "Calculated absolute index of the record within the entire dataset",
                    "type": "Number"
                }
            ],
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 730,
            "description": "Method called to ensure that the _afterDataReset method is called, specifically for the case\nwhere a DataSource is used (which is hard to track when it is plugged in ...)",
            "itemtype": "method",
            "name": "_afterSyncUI",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 742,
            "description": "A primary method for initially determining the origin of the \"data\" for paginating.\nDataTable calls \"this.data.reset()\" many times, most importantly at the very beginning\nbefore and before any remote responses have been received.\n\nWe use this fact to set an initial \"type\" of data origin (either 'mlist', 'ds' or 'local')\nto represent a ModelSync.REST origin, DataSource or just locally assigned data (default).\n\nThen after the initial typing, listeners are set for the appropriate remote source of\ndata, or for local data the assigned \"data\" attribute is used as the initial data.\n\nAfter this method is first completed,",
            "itemtype": "method",
            "name": "_afterDataReset",
            "params": [
                {
                    "name": "o",
                    "description": "Event object from the Model.reset event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 822,
            "description": "Method that stores the \"local\" data in an internal buffer within the _mlistArray static\nproperty.  The _mlistArray is stored as a simple JS Array type (for speed), and is used to\nselect current \"pages\" by Array slicing methods.\n\nIf the argument \"o\" is provided, it will be used as the new dataset for local data, if it\nis not set, then the current DT \"data\" attribute is used.\n\nOn a \"sort\" event, the buffer needs to be sorted first, then sliced for paging.",
            "itemtype": "method",
            "name": "_setLocalData",
            "params": [
                {
                    "name": "o",
                    "description": "Optional data to set as full local dataset",
                    "type": "Array|ModelList"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 853,
            "description": "Listener method that is called after the DataTable's data \"add\" event fires",
            "itemtype": "method",
            "name": "_afterDataAdd",
            "params": [
                {
                    "name": "o",
                    "description": "Event payload from ModelList's \"add\" event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 875,
            "description": "Event fired when the DataTable's \"data:add\" event is fired, that includes\nModelList.add's event payload.\n\nThis event could be used by implementers to handle refreshing of the local data.\n(not presently implemented)",
            "itemtype": "event",
            "name": "afterDataAdd",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "oPayload",
                    "description": "Event payload from ModelList.add",
                    "type": "Object"
                },
                {
                    "name": "pagIndex",
                    "description": "Calculated absolute index of the record within the entire dataset",
                    "type": "Number"
                }
            ],
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 888,
            "description": "Over-ridable method to call after the DataTable's data \"remove\" event fires",
            "itemtype": "method",
            "name": "_afterDataRemove",
            "params": [
                {
                    "name": "o",
                    "description": "Event payload from ModelList.remove",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 910,
            "description": "Event fired when the DataTable's \"data:remove\" event is fired, that includes\nthe ModelList.remove's event payload.\n\nThis event could be used by implementers to handle refreshing of the local data.\n(not presently implemented)",
            "itemtype": "event",
            "name": "afterDataRemove",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "oPayload",
                    "description": "Event payload from ModelList.remove",
                    "type": "Object"
                },
                {
                    "name": "pagIndex",
                    "description": "Calculated absolute index of the record within the entire dataset",
                    "type": "Number"
                }
            ],
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 923,
            "description": "Listener that fires after the DT \"sort\" event processes.  The Paginator must be\nreset to the currently selected new \"page\", based on the sorting criteria.\n\nFor remote sources this is easy, just send another remote page request.\n\nFor local data source it is more complex, as we have to deal with sorting the full\nlocal data array ...",
            "itemtype": "method",
            "name": "_afterSortPaginator",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 952,
            "description": "Method fires after the \"response\" event from DataSource OR after the custom ModelList fires\na REQUIRED user-defined \"response\" event.  (typically a custom ModelList's .parse() method\nis over-ridden to provide the custom \"response\" event including {results:, meta:} properties.\n\nUsage Note: The user is REQUIRED to provide a custom \"response\" event in the ModelList\n parse function in order for this to work properly.",
            "itemtype": "method",
            "name": "_afterRemoteResponse",
            "params": [
                {
                    "name": "o",
                    "description": "Includes results and meta properties passed in via \"response\" custom event;",
                    "type": "Object",
                    "props": [
                        {
                            "name": "results",
                            "description": "Array of result Objects",
                            "type": "Array"
                        },
                        {
                            "name": "meta",
                            "description": "Object including properties mapped to include pagination properties",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "rsource",
                    "description": "Source of response, either 'ds' or 'mlist'",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1000,
            "description": "Method fires after DataTable/DataSource plugin fires it's \"response\" event, which includes\nthe response object, including {results:, meta:} properties.",
            "itemtype": "method",
            "name": "_afterDSResponse",
            "params": [
                {
                    "name": "e",
                    "description": "Event object from DataSource's \"response\" event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1013,
            "description": "Method fires after custom ModelSync.REST \"load\" action fires a user-defined \"response\" event.\nThis can be implemented by extending ModelSync.REST by adding .parse() method which fires\na custom \"response\" event including {results:, meta:} properties.\n\nUsage Note: The user is REQUIRED to provide a custom \"response\" event in the ModelList\n parse overridden function in order for this to work properly.",
            "itemtype": "method",
            "name": "_afterMLResponse",
            "params": [
                {
                    "name": "resp",
                    "description": "Includes results and meta properties",
                    "type": "Object",
                    "props": [
                        {
                            "name": "resp",
                            "description": "Original raw response argument received into ModelList \"parse\" method",
                            "type": "String"
                        },
                        {
                            "name": "parsed",
                            "description": "Parsed raw response object after conversion (typically via JSON)",
                            "type": "Object"
                        },
                        {
                            "name": "results",
                            "description": "Array of result Objects",
                            "type": "Array"
                        },
                        {
                            "name": "meta",
                            "description": "Object including properties mapped to include pagination properties",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1034,
            "description": "Listener that fires when the Model's 'pageChange' fires, this extracts the current page from the state\nobject and then makes the appropriate processPageRequest call.",
            "itemtype": "method",
            "name": "_pageChangeListener",
            "params": [
                {
                    "name": "o",
                    "description": "Change event facade for the PaginatorModel 'pageChange' event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1048,
            "description": "A listener that monitors the \"totalItems\" attribute of the Paginator Model and\nif a zero list of items is returns it fires the \"paginatorZeroItems\" custom event.",
            "itemtype": "method",
            "name": "_totalItemsListener",
            "params": [
                {
                    "name": "Change",
                    "description": "event facade from the PaginatorModel 'totalItemsChange' event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1061,
            "description": "Event fired when the \"totalItems\" setting of the Paginator Model is set to zero,\ndue to a null response froma remote request or a null Array or ModelList being set.",
            "itemtype": "event",
            "name": "paginatorZeroItems",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1067,
            "description": "Method to adjust the CSS width of the paginator container and set it to the\n width of the underlying DT.",
            "itemtype": "method",
            "name": "_syncPaginatorSize",
            "return": {
                "description": "Boolean if success"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1084,
            "description": "Event fired after the _syncPaginatorSize method is called  (requires ATTR paginatorResize)\nto be set true",
            "itemtype": "event",
            "name": "paginatorResize",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1091,
            "description": "Helper method that searches the 'serverPaginationMap' ATTR and returns the requested\nproperty, including if it is nested as \"toServer\" or \"fromServer\" subattribute.\n( Used in processPageRequest )",
            "example": [
                "\n   _srvPagMapObj(\"itemsPerPage\")\n        { itemsPerPage : 'numPageRecords' }\n        { itemsPerPage : {toServer:'pageRows', fromServer:'pageRecordCount' }"
            ],
            "itemtype": "method",
            "name": "_srvPagMapObj",
            "params": [
                {
                    "name": "prop",
                    "description": "Property name to search for (expected matches in PaginatorModel ATTRS)",
                    "type": "String"
                },
                {
                    "name": "dir",
                    "description": "Directional (optional), either \"to\" (matches toServer) or \"from\" (matches fromServer)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "rprop Attribute name from RHS of map",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1119,
            "description": "Default 'valueFn' function setting for the ATTR `serverPaginationMap`, where\nthe defaults are simply the member names.",
            "itemtype": "method",
            "name": "_defPagMap",
            "return": {
                "description": "obj",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1135,
            "description": "Setter method for the `serverPaginationMap` attribute, which can be used to\n merge the \"default\" object with the user-supplied object.",
            "itemtype": "method",
            "name": "_setPagMap",
            "params": [
                {
                    "name": "val",
                    "description": "Object hash to serve as the attribute setting",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1149,
            "description": "Sets default for the \"paginationState\" DataTable attribute complex object as an\nobject with all of PaginatorModel ATTRS and the `sortBy` setting.",
            "itemtype": "method",
            "name": "_defPagState",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1165,
            "description": "Getter for the \"paginationState\" DataTable attribute complex object.",
            "itemtype": "method",
            "name": "_gefPagState",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1178,
            "description": "Sets default for the \"paginationState\" DataTable attribute complex object.",
            "itemtype": "method",
            "name": "_sefPagState",
            "params": [
                {
                    "name": "val",
                    "description": "Pagination state complex object settings",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1196,
            "description": "This is a setter for the 'paginator' attribute, primarily to set the public property `paginator` to the\nattribute value.",
            "itemtype": "method",
            "name": "_setPaginator",
            "params": [
                {
                    "name": "val",
                    "description": "The PaginatorView instance to set",
                    "type": "PaginatorView|View"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1214,
            "description": "A method that fires after the DataTable `renderView` method completes, that is *approximately* when\nthe DataTable has finished rendering.",
            "itemtype": "method",
            "name": "_notifyRender",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator.js",
            "line": 1227,
            "description": "Fires after the DataTable 'renderView' event fires",
            "itemtype": "event",
            "name": "render",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        }
    ]
}