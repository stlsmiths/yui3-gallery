{
    "project": {},
    "files": {
        "gallery-js/calendar-jumpnav.js": {
            "name": "gallery-js/calendar-jumpnav.js",
            "modules": {},
            "classes": {
                "Y.Plugin.Calendar.JumpNav": 1,
                "Y.Calendar.JumpNavView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/contextmenu-view.js": {
            "name": "gallery-js/contextmenu-view.js",
            "modules": {
                "contextmenu": 1
            },
            "classes": {
                "Y.ContextMenuView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/datatable-checkbox-select.js": {
            "name": "gallery-js/datatable-checkbox-select.js",
            "modules": {
                "Selection": 1
            },
            "classes": {
                "Y.DataTable.CheckboxSelect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/datatable-formatters.js": {
            "name": "gallery-js/datatable-formatters.js",
            "modules": {
                "formatters": 1
            },
            "classes": {
                "Y.DataTable.Formatters": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/datatable-paginator-class.js": {
            "name": "gallery-js/datatable-paginator-class.js",
            "modules": {
                "datatable": 1
            },
            "classes": {
                "Y.DataTable.Paginator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/dt_footerview.js": {
            "name": "gallery-js/dt_footerview.js",
            "modules": {
                "FooterView": 1
            },
            "classes": {
                "Y.FooterView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/gallery-datatable-selection.js": {
            "name": "gallery-js/gallery-datatable-selection.js",
            "modules": {},
            "classes": {
                "Y.DataTable.Selection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gallery-js/paginator-view.js": {
            "name": "gallery-js/paginator-view.js",
            "modules": {},
            "classes": {
                "Y.PaginatorModel": 1,
                "Y.PaginatorView": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "contextmenu": {
            "name": "contextmenu",
            "submodules": {},
            "classes": {
                "Y.Plugin.Calendar.JumpNav": 1,
                "Y.Calendar.JumpNavView": 1,
                "Y.ContextMenuView": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/contextmenu-view.js",
            "line": 1,
            "description": "This module includes a Y.View class extension that attaches to an existing \"trigger\" Node and uses event delegation to listen\nfor \"contextmenu\" requests (i.e. right-click). When the context menu is invoked, a Y.Overlay object is rendered and displayed\nthat includes user-defined menu items that are related to the context where the menu was invoked.\n\nThis view utilizes several attributes and fires several events that users can listen to in order to take specific actions based\non the \"trigger target\" node.\n\nPlease refer to the [trigger](#attr_trigger) ATTRIBUTE for more description of the target.node and target.trigger.\n\n#####Usage\nTo configure a bare-bones basic contextmenu, you need to provide the `trigger` and `menuItems` attributes as;\n\n    var cmenu = new Y.ContextMenuView({\n       trigger: {\n           node:   Y.one(\".myExistingContainer\"),\n           target:  'li'\n       },\n       menuItems: [ \"Add\", \"Edit\", \"Delete\" ]\n   });\n\nThe `menuItems` can be simple entries or Objects, if they are Objects the \"label\" property will be used to fill the visible Menu (See [menuItems](#attr_menuItems)).\n\n#####Attributes / Events\nAn implementer is typically interested in listening to the following ATTRIBUTE \"change\" events;\n<ul>\n  <li>`selectedMenuChange` : which fires when a contextmenu choice is clicked (see <a href=\"#attr_selectedMenu\">selectedMenu</a>)</li>\n  <li>`contextTargetChange`: which fires when the user \"right-clicks\" on the target.node (see <a href=\"#attr_contextTarget\">contextTarget</a>)</li>\n</ul>\n\nAdditionally please refer to the [Events](#events) section for more information on available events.",
            "is_constructor": 1
        },
        "DataTable": {
            "name": "DataTable",
            "submodules": {
                "Selection": 1
            },
            "classes": {
                "Y.DataTable.CheckboxSelect": 1,
                "Y.DataTable.Selection": 1,
                "Y.PaginatorModel": 1,
                "Y.PaginatorView": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "gallery-js/paginator-view.js",
            "line": 289
        },
        "Selection": {
            "name": "Selection",
            "submodules": {},
            "classes": {
                "Y.DataTable.CheckboxSelect": 1,
                "Y.DataTable.Selection": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "DataTable",
            "namespace": "",
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 1,
            "description": "A DataTable class extension that adds capability to provide a \"checkbox\" (INPUT[type=checkbox]) selection\ncapability via a new column, which includes \"select all\" checkbox in the TH.  The class uses only a few\ndefined attributes to add the capability.\n\nThis extension works with sorted data and with paginated DataTable (via Y.DataTable.Paginator), by retaining\na set of \"primary keys\" for the selected records.\n\nUsers define the \"primary keys\" by either setting a property flag of \"primaryKey:true\" in the DataTable\ncolumn configuration OR by setting the [primaryKeys](#attr_primaryKeys) attribute.\n\nTo enable the \"checkbox\" selection, set the attribute [checkboxSelectMode](#attr_checkboxSelectMode) to true,\nwhich will add a new column as the first column and sets listeners for checkbox selections.\n\nTo retrieve the \"checkbox\" selected records, the attribute [checkboxSelected](#attr_checkboxSelected) can be\nqueried to return an array of objects of selected records (See method [_getCheckboxSelected](#method__getCheckboxSelected))\nfor details.\n\n####Usage\n\t\tvar dtable = new Y.DataTable({\n\t\t    columns: \t['port','pname', 'ptitle'],\n\t\t    data: \t\tports,\n\t\t    scrollable: 'y',\n\t\t    height: \t'250px',\n\t\t\n\t\t// define two primary keys and enable checkbox selection mode ...\n\t\t    primaryKeys:\t\t[ 'port', 'pname' ],\n\t\t    checkboxSelectMode:\ttrue\n\t\t\n\t\t}).render(\"#dtable\");",
            "extends": "Y.DataTable",
            "author": "Todd Smith",
            "version": "1.0.0",
            "since": "3.6.0"
        },
        "datatable": {
            "name": "datatable",
            "submodules": {
                "formatters": 1
            },
            "classes": {
                "Y.DataTable.Formatters": 1,
                "Y.DataTable.Paginator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 1,
            "description": "Defines a Y.DataTable class extension to add capability to support a Paginator View-Model and allow\n paging of actively displayed data within the DT instance.\n\nWorks with either client-side pagination (i.e. local data, usually in form of JS Array) or\n in conjunction with remote server-side pagination, via either DataSource or ModelSync.REST.\n\nAllows for dealing with sorted data, wherein the local data is sorted in place, and in the case of remote data the \"sortBy\"\nattribute is passed to the remote server.\n\n <h4>Usage</h4>\n\n      var dtable = new Y.DataTable({\n          columns:    [ 'firstName','lastName','state','age', 'grade' ],\n          data:       enrollment.records,\n          scrollable: 'y',\n          height:     '450px',\n          sortBy:     [{lastName:'asc'}, {grade:-1}],\n          paginator:  new PaginatorView({\n\t\t\t\t\tmodel: \t\tnew PaginatorModel({itemsPerPage:50, page:3}),\n\t\t\t\t\tcontainer:\t'#pagContA'\n          }),\n          resizePaginator: true\n      });\n\n <h4>Client OR Server Pagination</h4>\n\n A determination of whether the source of `data` is either \"local\" data (i.e. a Javascript Array or Y.ModelList), or is\n provided from a server (either DataSource or ModelSync.REST) is made in the method [_dataChange](#method__dataChange).\n We use a \"duck-type\" evaluation, which may not be completely robust, but has worked so far in testing. The process used to\n evaluate the \"source\" of data can be reviewed in the _dataChange method.\n\n For server-side pagination, the OUTGOING request must include (as a minimum);  `page`, `totalItems` and `sortBy` querystring\n parameters.  Likewise, the INCOMING (returned response) must include as \"meta-data\" at least `totalItems`, plus any other\n PaginatorModel attributes.   The key item within the returned response is `totalItems'.\n\n We have provided an attribute [serverPaginationMap](#attr_serverPaginationMap) as an object hash to translate both outgoing\n querystring parameter names and incoming (response returned) parameter names in order to match what is expected by the\n PaginatorModel.  Please see this attribute or the examples for how to utilize this map for your use case.\n\n <h4>Loading the \"data\" For a Page</h4>\n Once the \"source of data\" is known, the method [processPageRequest](#method_processPageRequest) fires on a `pageChange`.\n\n For the case of \"local data\", i.e. where `_pagDataSrc:'local'`, the existing buffer of data is sliced according to the pagination\n state, and the data is loaded silently, and `this.syncUI()` is fired to refresh the DT.\n\n The case of \"remote data\" (from a server) is actually more straightforward.  For the case of ModelSync.REST remote data the\n current \"pagination state\" is processed through the [serverPaginationMap](#attr_serverPaginationMap) hash (to convert to\n queryString format) and the ModelList.load() method is called.  For the case of a DataSource, a similar approach is used where\n the [requestStringTemplate](#attr_requestStringTemplate) is read, processed through the serverPaginationMap hash and a\n datasource.load() request is fired.\n\n This extension DOES NOT \"cache\" pages for remote data, it simply inserts the full returned data into the DT.  So as a consequence,\n a pagination state change for remote data involves a simple request sent to the server source (either DataSource or ModelSync.REST)\n and the response results are loaded in the DT as in any other \"response\".",
            "extends": "Y.DataTable",
            "version": "1.0.1",
            "since": "3.6.0",
            "author": "Todd Smith"
        },
        "formatters": {
            "name": "formatters",
            "submodules": {},
            "classes": {
                "Y.DataTable.Formatters": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "gallery-js/datatable-formatters.js",
            "line": 1,
            "description": "Define a \"named\" Column Formatters object and attach it to the Y.DataTable namespace.\nThe named formatters are defined as a series of format strings that are typically used by the\ndata formatting function Y.DataType.Number.format and Y.DataType.Date.format.\n\nThe function [`namedFormatter`](#method_namedFormatter) is defined that can be used to call as a column formatter which\nformats the column cell using the [`formatStrings`](#property_formatStrings) object.\n\nThis module includes an override of the [Y.DataTable.BodyView._createRowHTML](#method_Y.DataTable.BodyView._createRowHTML) method.  Therefore implementers shouldn't call the `namedFormatter` method directly because the overridden method handles the call if the entered formatter string name is recognized.\n \n###Usage\nThe format string names can be used in a column configuration object as follows;\n\n\t\tvar dt1 = new Y.DataTable({\n\t        data: some_data,\n   \t    columns: [\n       \t    { key:\"start_date\", label:\"Start\", formatter:\"fullDate\" },\n           \t{ key:\"end_date\", label:\"End\", formatter:\"default\",\n\t                 formatOptions:{ type:'date', formatConfig:{ format:'%F' } }    },\n   \t        { key:\"qty\", label:\"Inventory Qty\", formatter:\"comma\" },\n       \t    { key:\"cost\", label:\"Carried Cost\", formatter:\"currency\",\n\t                 formatConfig:{ prefix:'£', thousandsSeparator:\",\"} }\n   \t    ]\n\t\t}).render();\n\n####Pre-Defined `formatStrings` settings; (specifically, Y.DataTable.Formatters.formatStrings)\nFor \"number\" formatting, using [Y.DataType.Number](http://yuilibrary.com/yui/docs/api/classes/DataType.Number.html#method_format).\n\n<table><tr><th>string</th><th>Formatter Object</th><th>Formatted Example</th></tr>\n<tr><td>`general`</td><td>{ decimalPlaces:0 }</td><td>123457</td></tr>\n<tr><td>`general2`</td><td>{ decimalPlaces:2 }</td><td>123456.79</td></tr>\n<tr><td>`currency`</td><td>{ prefix:'$', decimalPlaces:0, thousandsSeparator:',' }</td><td>$ 123,457</td></tr>\n<tr><td>`currency2`</td><td>{ prefix:'$', decimalPlaces:2, thousandsSeparator:',' }</td><td>$ 123,456.78</td></tr>\n<tr><td>`currency3`</td><td>{ prefix:'$', decimalPlaces:3, thousandsSeparator:',' }</td><td>$ 123,457.789</td></tr>\n<tr><td>`comma`</td><td>{ decimalPlaces:0, thousandsSeparator:','}</td><td>123,457</td></tr>\n<tr><td>`comma2`</td><td>{ decimalPlaces:2, thousandsSeparator:','}</td><td>123,456.78</td></tr>\n<tr><td>`comma3`</td><td>{ decimalPlaces:3, thousandsSeparator:','}</td><td>123,457.789</td></tr>\n</table>\n\nFor \"date\" formatting, using [Y.DataType.Date](http://yuilibrary.com/yui/docs/api/classes/DataType.Date.html#method_format).\n<br/>(Please refer to the Date.format method above for the proper use of \"strftime\" format strings)\n<table><tr><th>string</th><th>Formatter Object</th><th>Formatted Example</th></tr>\n<tr><td>`shortDate`</td><td>{ format:'%D' }</td><td>03/12/92</td></tr>\n<tr><td>`longDate`</td><td>{ format:'%m/%d/%Y' }</td><td>03/12/1992</td></tr>\n<tr><td>`fullDate`</td><td>{ format:'%B %e, %Y' }</td><td>March 12, 1992</td></tr>\n<tr><td>`isoDate`</td><td>{ format:'%F'}</td><td>1992-03-12</td></tr>\n<tr><td>`isoDateTime`</td><td>{ format:'%FT%T'}</td><td>1992-03-12T22:11:07</td></tr>\n</table>\n\n####Replaceable Hash\nThis utility can also replace the cell value with values from a data hash (i.e. JS simple object, consisting of key:value pairs).\nAccess to this capability is by providing a `formatter` as any string not-recognizable in the `formatStrings` object\n**AND** by providing a `formatConfig` object (equal to the hash) in the column definition.\n\n####User-Defined `formatStrings`\nImplementers may add their \"named\" own formatting strings for their own use-cases simply by adding more named formatters to the `formatStrings` object as;\n\n\tY.DataTable.Formatters.formatStrings['myNumberFmtr'] = {\n\t\ttype:'number', \n\t\tformatConfig:{ thousandsSeparator:'x', decimalPlaces:11 } \n\t};\n\tY.DataTable.Formatters.formatStrings['myDateFmtr'] = {\n\t\ttype:'date', \n\t\tformatConfig:{ format:{ \"At the tone the TIME will be %T\" } \n\t};",
            "type": "{Object}"
        },
        "FooterView": {
            "name": "FooterView",
            "submodules": {},
            "classes": {
                "Y.FooterView": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "gallery-js/dt_footerview.js",
            "line": 1,
            "description": "FooterView is a YUI View class extension that provides a simple, one row summary row\nto a Datatable. This view provides\nfor a summary row appended to the bottom of the DataTable TBODY, typically consisting\nof **one** TH element (with a colspan) and several TD elements for each desired column\nwhere a \"calculated field\" is desired.\n\nView configuration provides for calculated fields based upon the all of the available\ndataset fields within the DataTable's \"ModelList\".\n\nThe view works with either non-scrolling or scrolling DataTables, and allows for either a\n\"fixed\" view, wherein the footer remains fixed at the bottom of the DataTable contentBox\nwhile the table is scrolled.\n\n#### Calculated Fields\n\nThe current implementation supports the following calculated fields, where they are\nidentified by their placeholder tag for replacement via Y.sub (case insensitive);\n\n* `{sum}` Calculate the arithmetic sum of the specified column in dataset\n* `{min}` Calculate the minimum value of the specified column in dataset\n* `{max}` Calculate the maximum value of the specified column in dataset\n* `{avg}` Calculate the arithmetic average of the of the specified column (synonyms `{mean}`, `{average}`)\n\nAlso, non-looping calcs are;\n\n*  `{row_count}` Returns the number of rows in the dataset\n*  `{col_count}` Returns the number of columns in the dataset (no visibility check)\n*  `{date}` Returns the current date\n*  `{time}` Returns the current time\n\n#### Configuration\n\nYUI 3.6.0 DataTable supports attributes including `footerView` and `footerConfig`.\n\nThis FooterView recognizes the following attributes, which must be configured via the\nDataTable {configs} (see usage example below);\n\n* [`fixed`](#attr_fixed) : Flag indicating if footer should be fixed or floating\n* [`heading`](#attr_heading) : Object, defining the single TH as;\n   * [`colspan`](#attr_heading.colspan) : Number of columns to merge from left for the TH\n   * [`content`](#attr_heading.content) : A string indicating the content of the TH for the footer\n   * [`className`](#attr_heading.className) : Additional classname for TH\n* [`columns`](#attr_columns) : Array of objects, one per desired TD column in footer as;\n   * [`key`](#attr_columns.key) : `key` name from the DataTable columns\n   * [`content`](#attr_columns.content) : String indicating the contents of this TD\n   * [`className`](#attr_columns.className) : Additional classname for TD\n   * [`formatter`](#attr_columns.formatter) : Formatter to apply to this column result\n* [`dateFormat`](#attr_dateFormat) : Format string to use for any {date} fields\n* [`timeFormat`](#attr_timeFormat) : Format string to use for any {time} fields\n\nAdditionally the user can provide a valid function as a column `content` to calculate a\ncustom entry for \n<br/>a column (see [`columns.content`](#attr_columns.content) or [`calcDatasetValue`](#method_calcDatasetValue))\n\n#### Usage\n\n    var dtable = new Y.DataTable({\n        columns:    ['EmpId','FirstName','LastName','NumClients','SalesTTM'],\n        data:       AccountMgr.Sales,\n        scrollable: 'y',\n        height:     '250px',\n        width:      '400px',\n\n        footerView:   Y.FooterView,\n        footerConfig: {\n            fixed:   true,\n            heading: {\n                colspan:\t3,\n                content:\t\"Sales Totals for {row_count} Account Mgrs : &nbsp;\",\n                className:\t\"align-right\"\n            },\n            columns: [\n                { key:'NumClients', content:\"{Avg} avg\", className:\"clientAvg\" },\n                { key:'SalesTTM',   content:\"{sum}\", className:\"salesTotal\", formatter:fmtCurrency }\n            ]\n        }\n    });\n\n    dtable.render('#salesDT');",
            "extends": "Y.View",
            "author": "Todd Smith",
            "version": "1.1.0",
            "since": "3.6.0"
        }
    },
    "classes": {
        "Y.Plugin.Calendar.JumpNav": {
            "name": "Y.Plugin.Calendar.JumpNav",
            "shortname": "Y.Plugin.Calendar.JumpNav",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contextmenu",
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 1,
            "description": "A Plugin for Y.Calendar that sets up Calendar to work with Y.Calendar.JumpNavView, which\nis a View class extension to setup a \"click\" listener on Calendar's \"Month Year\" header label\nthat opens a popup Panel to provide a quick method to jump to a month / year.\n\nPlease see the Calendar.JumpNavView documentation for full details.",
            "example": [
                "\n\tvar myCal = new Y.Calendar({\n\t\tcontentBox: \"#mycal\",\n\t\twidth: '200px',\n\t\tshowPrevMonth: true,\n\t\tshowNextMonth: true\n\t});\n\n\t// Plugin the View to this Calendar ... available years are 1988 to 2021\n\tcal.plug( Y.Plugin.Calendar.JumpNav, {\n\t\tyearStart: 1988,\n\t\tyearEnd:   2021\n\t});\n\n\tcal.render();"
            ],
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "is_constructor": 1
        },
        "Y.Calendar.JumpNavView": {
            "name": "Y.Calendar.JumpNavView",
            "shortname": "Y.Calendar.JumpNavView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contextmenu",
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 150,
            "description": "This class defines a View class extension for Calendar that configures to load on a \"click\" on the Calendar's \"Month Year\"\nheader label to display a popup panel that allows for selecting the month / year without requiring to page thru by month.\nThe view creates a Panel instance from a standard template (see the property [template](#property_template) for the default)\nand handles populating the SELECT dropdown controls for \"month\" and \"year\".\n\nAttributes are provided that include [yearStart](#attr_yearStart) and [yearEnd](#attr_yearEnd) for defining the range to\nbe used for the \"year\" dropdown elements, for example.\n\n#####Usage\nThe simplest application includes creating a Calendar instance and then creating the View and attaching the calendar to\nthe view with the [calendar](#attr_calendar) attribute.\n\n\tvar cal = new Y.Calendar({\n\t\tcontentBox: \"#mycal\",\n\t\twidth:'240px',\n\t\tshowPrevMonth: true,\n\t\tshowNextMonth: true\n\t}).render();\n\n\t// This creates a View instance and connects it to the \"cal\" Calendar instance.\n\tvar calJNav = new Y.Calendar.JumpNavView({\n\t\tcalendar:  cal,\n\t\tyearStart: 1988,\n\t\tyearEnd:   2021\n\t});\n\nAn additional module is provided, the Y.Plugin.Calendar.JumpNav plugin that attaches the Calendar to the view via a plugin method.",
            "extends": "Y.View",
            "version": "3.5.0"
        },
        "Y.ContextMenuView": {
            "name": "Y.ContextMenuView",
            "shortname": "Y.ContextMenuView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contextmenu",
            "namespace": "",
            "file": "gallery-js/contextmenu-view.js",
            "line": 1,
            "description": "This module includes a Y.View class extension that attaches to an existing \"trigger\" Node and uses event delegation to listen\nfor \"contextmenu\" requests (i.e. right-click). When the context menu is invoked, a Y.Overlay object is rendered and displayed\nthat includes user-defined menu items that are related to the context where the menu was invoked.\n\nThis view utilizes several attributes and fires several events that users can listen to in order to take specific actions based\non the \"trigger target\" node.\n\nPlease refer to the [trigger](#attr_trigger) ATTRIBUTE for more description of the target.node and target.trigger.\n\n#####Usage\nTo configure a bare-bones basic contextmenu, you need to provide the `trigger` and `menuItems` attributes as;\n\n    var cmenu = new Y.ContextMenuView({\n       trigger: {\n           node:   Y.one(\".myExistingContainer\"),\n           target:  'li'\n       },\n       menuItems: [ \"Add\", \"Edit\", \"Delete\" ]\n   });\n\nThe `menuItems` can be simple entries or Objects, if they are Objects the \"label\" property will be used to fill the visible Menu (See [menuItems](#attr_menuItems)).\n\n#####Attributes / Events\nAn implementer is typically interested in listening to the following ATTRIBUTE \"change\" events;\n<ul>\n  <li>`selectedMenuChange` : which fires when a contextmenu choice is clicked (see <a href=\"#attr_selectedMenu\">selectedMenu</a>)</li>\n  <li>`contextTargetChange`: which fires when the user \"right-clicks\" on the target.node (see <a href=\"#attr_contextTarget\">contextTarget</a>)</li>\n</ul>\n\nAdditionally please refer to the [Events](#events) section for more information on available events."
        },
        "Y.DataTable.CheckboxSelect": {
            "name": "Y.DataTable.CheckboxSelect",
            "shortname": "Y.DataTable.CheckboxSelect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataTable",
            "submodule": "Selection",
            "namespace": "",
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 1,
            "description": "A DataTable class extension that adds capability to provide a \"checkbox\" (INPUT[type=checkbox]) selection\ncapability via a new column, which includes \"select all\" checkbox in the TH.  The class uses only a few\ndefined attributes to add the capability.\n\nThis extension works with sorted data and with paginated DataTable (via Y.DataTable.Paginator), by retaining\na set of \"primary keys\" for the selected records.\n\nUsers define the \"primary keys\" by either setting a property flag of \"primaryKey:true\" in the DataTable\ncolumn configuration OR by setting the [primaryKeys](#attr_primaryKeys) attribute.\n\nTo enable the \"checkbox\" selection, set the attribute [checkboxSelectMode](#attr_checkboxSelectMode) to true,\nwhich will add a new column as the first column and sets listeners for checkbox selections.\n\nTo retrieve the \"checkbox\" selected records, the attribute [checkboxSelected](#attr_checkboxSelected) can be\nqueried to return an array of objects of selected records (See method [_getCheckboxSelected](#method__getCheckboxSelected))\nfor details.\n\n####Usage\n\t\tvar dtable = new Y.DataTable({\n\t\t    columns: \t['port','pname', 'ptitle'],\n\t\t    data: \t\tports,\n\t\t    scrollable: 'y',\n\t\t    height: \t'250px',\n\t\t\n\t\t// define two primary keys and enable checkbox selection mode ...\n\t\t    primaryKeys:\t\t[ 'port', 'pname' ],\n\t\t    checkboxSelectMode:\ttrue\n\t\t\n\t\t}).render(\"#dtable\");"
        },
        "Y.DataTable.Formatters": {
            "name": "Y.DataTable.Formatters",
            "shortname": "Y.DataTable.Formatters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "formatters",
            "namespace": "",
            "file": "gallery-js/datatable-formatters.js",
            "line": 1,
            "description": "Define a \"named\" Column Formatters object and attach it to the Y.DataTable namespace.\nThe named formatters are defined as a series of format strings that are typically used by the\ndata formatting function Y.DataType.Number.format and Y.DataType.Date.format.\n\nThe function [`namedFormatter`](#method_namedFormatter) is defined that can be used to call as a column formatter which\nformats the column cell using the [`formatStrings`](#property_formatStrings) object.\n\nThis module includes an override of the [Y.DataTable.BodyView._createRowHTML](#method_Y.DataTable.BodyView._createRowHTML) method.  Therefore implementers shouldn't call the `namedFormatter` method directly because the overridden method handles the call if the entered formatter string name is recognized.\n \n###Usage\nThe format string names can be used in a column configuration object as follows;\n\n\t\tvar dt1 = new Y.DataTable({\n\t        data: some_data,\n   \t    columns: [\n       \t    { key:\"start_date\", label:\"Start\", formatter:\"fullDate\" },\n           \t{ key:\"end_date\", label:\"End\", formatter:\"default\",\n\t                 formatOptions:{ type:'date', formatConfig:{ format:'%F' } }    },\n   \t        { key:\"qty\", label:\"Inventory Qty\", formatter:\"comma\" },\n       \t    { key:\"cost\", label:\"Carried Cost\", formatter:\"currency\",\n\t                 formatConfig:{ prefix:'£', thousandsSeparator:\",\"} }\n   \t    ]\n\t\t}).render();\n\n####Pre-Defined `formatStrings` settings; (specifically, Y.DataTable.Formatters.formatStrings)\nFor \"number\" formatting, using [Y.DataType.Number](http://yuilibrary.com/yui/docs/api/classes/DataType.Number.html#method_format).\n\n<table><tr><th>string</th><th>Formatter Object</th><th>Formatted Example</th></tr>\n<tr><td>`general`</td><td>{ decimalPlaces:0 }</td><td>123457</td></tr>\n<tr><td>`general2`</td><td>{ decimalPlaces:2 }</td><td>123456.79</td></tr>\n<tr><td>`currency`</td><td>{ prefix:'$', decimalPlaces:0, thousandsSeparator:',' }</td><td>$ 123,457</td></tr>\n<tr><td>`currency2`</td><td>{ prefix:'$', decimalPlaces:2, thousandsSeparator:',' }</td><td>$ 123,456.78</td></tr>\n<tr><td>`currency3`</td><td>{ prefix:'$', decimalPlaces:3, thousandsSeparator:',' }</td><td>$ 123,457.789</td></tr>\n<tr><td>`comma`</td><td>{ decimalPlaces:0, thousandsSeparator:','}</td><td>123,457</td></tr>\n<tr><td>`comma2`</td><td>{ decimalPlaces:2, thousandsSeparator:','}</td><td>123,456.78</td></tr>\n<tr><td>`comma3`</td><td>{ decimalPlaces:3, thousandsSeparator:','}</td><td>123,457.789</td></tr>\n</table>\n\nFor \"date\" formatting, using [Y.DataType.Date](http://yuilibrary.com/yui/docs/api/classes/DataType.Date.html#method_format).\n<br/>(Please refer to the Date.format method above for the proper use of \"strftime\" format strings)\n<table><tr><th>string</th><th>Formatter Object</th><th>Formatted Example</th></tr>\n<tr><td>`shortDate`</td><td>{ format:'%D' }</td><td>03/12/92</td></tr>\n<tr><td>`longDate`</td><td>{ format:'%m/%d/%Y' }</td><td>03/12/1992</td></tr>\n<tr><td>`fullDate`</td><td>{ format:'%B %e, %Y' }</td><td>March 12, 1992</td></tr>\n<tr><td>`isoDate`</td><td>{ format:'%F'}</td><td>1992-03-12</td></tr>\n<tr><td>`isoDateTime`</td><td>{ format:'%FT%T'}</td><td>1992-03-12T22:11:07</td></tr>\n</table>\n\n####Replaceable Hash\nThis utility can also replace the cell value with values from a data hash (i.e. JS simple object, consisting of key:value pairs).\nAccess to this capability is by providing a `formatter` as any string not-recognizable in the `formatStrings` object\n**AND** by providing a `formatConfig` object (equal to the hash) in the column definition.\n\n####User-Defined `formatStrings`\nImplementers may add their \"named\" own formatting strings for their own use-cases simply by adding more named formatters to the `formatStrings` object as;\n\n\tY.DataTable.Formatters.formatStrings['myNumberFmtr'] = {\n\t\ttype:'number', \n\t\tformatConfig:{ thousandsSeparator:'x', decimalPlaces:11 } \n\t};\n\tY.DataTable.Formatters.formatStrings['myDateFmtr'] = {\n\t\ttype:'date', \n\t\tformatConfig:{ format:{ \"At the tone the TIME will be %T\" } \n\t};"
        },
        "Y.DataTable.Paginator": {
            "name": "Y.DataTable.Paginator",
            "shortname": "Y.DataTable.Paginator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "DataTable"
            ],
            "module": "datatable",
            "namespace": "",
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 1,
            "description": "Defines a Y.DataTable class extension to add capability to support a Paginator View-Model and allow\n paging of actively displayed data within the DT instance.\n\nWorks with either client-side pagination (i.e. local data, usually in form of JS Array) or\n in conjunction with remote server-side pagination, via either DataSource or ModelSync.REST.\n\nAllows for dealing with sorted data, wherein the local data is sorted in place, and in the case of remote data the \"sortBy\"\nattribute is passed to the remote server.\n\n <h4>Usage</h4>\n\n      var dtable = new Y.DataTable({\n          columns:    [ 'firstName','lastName','state','age', 'grade' ],\n          data:       enrollment.records,\n          scrollable: 'y',\n          height:     '450px',\n          sortBy:     [{lastName:'asc'}, {grade:-1}],\n          paginator:  new PaginatorView({\n\t\t\t\t\tmodel: \t\tnew PaginatorModel({itemsPerPage:50, page:3}),\n\t\t\t\t\tcontainer:\t'#pagContA'\n          }),\n          resizePaginator: true\n      });\n\n <h4>Client OR Server Pagination</h4>\n\n A determination of whether the source of `data` is either \"local\" data (i.e. a Javascript Array or Y.ModelList), or is\n provided from a server (either DataSource or ModelSync.REST) is made in the method [_dataChange](#method__dataChange).\n We use a \"duck-type\" evaluation, which may not be completely robust, but has worked so far in testing. The process used to\n evaluate the \"source\" of data can be reviewed in the _dataChange method.\n\n For server-side pagination, the OUTGOING request must include (as a minimum);  `page`, `totalItems` and `sortBy` querystring\n parameters.  Likewise, the INCOMING (returned response) must include as \"meta-data\" at least `totalItems`, plus any other\n PaginatorModel attributes.   The key item within the returned response is `totalItems'.\n\n We have provided an attribute [serverPaginationMap](#attr_serverPaginationMap) as an object hash to translate both outgoing\n querystring parameter names and incoming (response returned) parameter names in order to match what is expected by the\n PaginatorModel.  Please see this attribute or the examples for how to utilize this map for your use case.\n\n <h4>Loading the \"data\" For a Page</h4>\n Once the \"source of data\" is known, the method [processPageRequest](#method_processPageRequest) fires on a `pageChange`.\n\n For the case of \"local data\", i.e. where `_pagDataSrc:'local'`, the existing buffer of data is sliced according to the pagination\n state, and the data is loaded silently, and `this.syncUI()` is fired to refresh the DT.\n\n The case of \"remote data\" (from a server) is actually more straightforward.  For the case of ModelSync.REST remote data the\n current \"pagination state\" is processed through the [serverPaginationMap](#attr_serverPaginationMap) hash (to convert to\n queryString format) and the ModelList.load() method is called.  For the case of a DataSource, a similar approach is used where\n the [requestStringTemplate](#attr_requestStringTemplate) is read, processed through the serverPaginationMap hash and a\n datasource.load() request is fired.\n\n This extension DOES NOT \"cache\" pages for remote data, it simply inserts the full returned data into the DT.  So as a consequence,\n a pagination state change for remote data involves a simple request sent to the server source (either DataSource or ModelSync.REST)\n and the response results are loaded in the DT as in any other \"response\"."
        },
        "Y.FooterView": {
            "name": "Y.FooterView",
            "shortname": "Y.FooterView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "FooterView",
            "namespace": "",
            "file": "gallery-js/dt_footerview.js",
            "line": 1,
            "description": "FooterView is a YUI View class extension that provides a simple, one row summary row\nto a Datatable. This view provides\nfor a summary row appended to the bottom of the DataTable TBODY, typically consisting\nof **one** TH element (with a colspan) and several TD elements for each desired column\nwhere a \"calculated field\" is desired.\n\nView configuration provides for calculated fields based upon the all of the available\ndataset fields within the DataTable's \"ModelList\".\n\nThe view works with either non-scrolling or scrolling DataTables, and allows for either a\n\"fixed\" view, wherein the footer remains fixed at the bottom of the DataTable contentBox\nwhile the table is scrolled.\n\n#### Calculated Fields\n\nThe current implementation supports the following calculated fields, where they are\nidentified by their placeholder tag for replacement via Y.sub (case insensitive);\n\n* `{sum}` Calculate the arithmetic sum of the specified column in dataset\n* `{min}` Calculate the minimum value of the specified column in dataset\n* `{max}` Calculate the maximum value of the specified column in dataset\n* `{avg}` Calculate the arithmetic average of the of the specified column (synonyms `{mean}`, `{average}`)\n\nAlso, non-looping calcs are;\n\n*  `{row_count}` Returns the number of rows in the dataset\n*  `{col_count}` Returns the number of columns in the dataset (no visibility check)\n*  `{date}` Returns the current date\n*  `{time}` Returns the current time\n\n#### Configuration\n\nYUI 3.6.0 DataTable supports attributes including `footerView` and `footerConfig`.\n\nThis FooterView recognizes the following attributes, which must be configured via the\nDataTable {configs} (see usage example below);\n\n* [`fixed`](#attr_fixed) : Flag indicating if footer should be fixed or floating\n* [`heading`](#attr_heading) : Object, defining the single TH as;\n   * [`colspan`](#attr_heading.colspan) : Number of columns to merge from left for the TH\n   * [`content`](#attr_heading.content) : A string indicating the content of the TH for the footer\n   * [`className`](#attr_heading.className) : Additional classname for TH\n* [`columns`](#attr_columns) : Array of objects, one per desired TD column in footer as;\n   * [`key`](#attr_columns.key) : `key` name from the DataTable columns\n   * [`content`](#attr_columns.content) : String indicating the contents of this TD\n   * [`className`](#attr_columns.className) : Additional classname for TD\n   * [`formatter`](#attr_columns.formatter) : Formatter to apply to this column result\n* [`dateFormat`](#attr_dateFormat) : Format string to use for any {date} fields\n* [`timeFormat`](#attr_timeFormat) : Format string to use for any {time} fields\n\nAdditionally the user can provide a valid function as a column `content` to calculate a\ncustom entry for \n<br/>a column (see [`columns.content`](#attr_columns.content) or [`calcDatasetValue`](#method_calcDatasetValue))\n\n#### Usage\n\n    var dtable = new Y.DataTable({\n        columns:    ['EmpId','FirstName','LastName','NumClients','SalesTTM'],\n        data:       AccountMgr.Sales,\n        scrollable: 'y',\n        height:     '250px',\n        width:      '400px',\n\n        footerView:   Y.FooterView,\n        footerConfig: {\n            fixed:   true,\n            heading: {\n                colspan:\t3,\n                content:\t\"Sales Totals for {row_count} Account Mgrs : &nbsp;\",\n                className:\t\"align-right\"\n            },\n            columns: [\n                { key:'NumClients', content:\"{Avg} avg\", className:\"clientAvg\" },\n                { key:'SalesTTM',   content:\"{sum}\", className:\"salesTotal\", formatter:fmtCurrency }\n            ]\n        }\n    });\n\n    dtable.render('#salesDT');"
        },
        "Y.DataTable.Selection": {
            "name": "Y.DataTable.Selection",
            "shortname": "Y.DataTable.Selection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataTable",
            "submodule": "Selection",
            "namespace": "",
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 1,
            "description": "A class extension for DataTable that adds \"highlight\" and \"select\" actions via mouse selection.\nThe extension works in either \"cell\" mode or \"row\" mode (set via attribute [selectionMode](#attr_selectionMode)).\n\nHighlighting is controlled by the [highlightMode](#attr_highlightMode) attribute (either \"cell\" or \"row\").\n(Highlighting provides a \"mouseover\" indication only).\n\nSelection is provided via \"click\" listeners.\n\nThis extension includes the ability to select \"multiple\" items, by setting the [selectionMulti](#attr_selectionMulti)\nattribute (enabled using browser multi-select click modifier, i.e. \"Cmd\" key on Mac OSX or \"Ctrl\" key on Windows / Linux).\n\nAdditionally, a \"range\" selection capability is provided by using the browser range selector click key modifier,\nspecifically the Shift key on most systems.\n\nThe extension has been written to allow preserving the \"selected\" rows or cells during \"sort\" operations.\n\nSpecific attributes are provided that can be read for current selections, including the ATTRS [selectedRows](#attr_selectedRows),\nand [selectedCells](#attr_selectedCells).\n\nTypical usage would be to set the \"selectionMode\" attribute (and selectionMulti if desired), and then to listen to for the\n[selection](#event_selection) event to respond to each \"click\" selection."
        },
        "Y.PaginatorModel": {
            "name": "Y.PaginatorModel",
            "shortname": "Y.PaginatorModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataTable",
            "namespace": "",
            "file": "gallery-js/paginator-view.js",
            "line": 1,
            "description": "A Model class extension to be used to track \"pagination state\" of a paged set of control elements.\nFor example, can be used to track the pagination status of a DataTable where the user selects limited\nportions for display, against a larger data set.\n\nThe primary tools for maintaining \"page state\" is through the following attributes;\n\n   * `totalItems` &nbsp;&nbsp;  Which represents the \"Total count of items of interest\" (See attribute [totalItems](#attr_totalItems) )\n   * `itemsPerPage` &nbsp;&nbsp; Which represents the \"Count of items on each page\" (See attribute [itemsPerPage](#attr_itemsPerPage) )\n   *  `page` &nbsp;&nbsp;  The currently selected page, within all pages required that encompass the above two attributes (See attribute [page](#attr_page) )\n\n<h4>Usage</h4>\n\n       // setup a paginator model for 500 'foo' items, paged at 50 per page ...\n       var pagModel = new Y.PaginatorModel({\n           totalItems:     500,\n           itemsPerPage:   50\n       });\n       pagModel.get('totalPages');  // returns 10\n\n       pagModel.set('page',3);\n       pagModel.getAttrs(['lastPage','page','itemIndexStart','itemIndexEnd']);\n       // returns ... { lastPage:1, page:3, itemIndexStart:100, itemIndexEnd:149 }",
            "extends": "Y.Model",
            "version": "1.0.1",
            "since": "3.6.0"
        },
        "Y.PaginatorView": {
            "name": "Y.PaginatorView",
            "shortname": "Y.PaginatorView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataTable",
            "namespace": "",
            "file": "gallery-js/paginator-view.js",
            "line": 289,
            "description": "A View class extension to serve as a User Interface for the tracking of \"pagination state\" of\na set of data.  This PaginatorView was specifically designed to work with PaginatorModel\nserving as the \"model\" (in MVC parlance), although would work with any user-supplied model under conditions\nwhere similar attributes and attribute changes are mapped.\n\nThe PaginatorView was originally designed to function with DataTable (See Y.DataTable.Paginator) for managing the UI\nand page state of paginated tables, although it isn't necessarily limited to that application.  This View responds to\nthe model's attribute `xxxxChange` events and updates the UI accordingly.\n\nThe PaginatorView utilizes an HTML template concept, where certain replaceable tokens uniquely related to this view,\nin addition to all of the model's attributes, can be defined for positioning within the Paginator container.\n\n<h4>Usage</h4>\n\n       // Setup a paginator view based on a data model for 500 items, paged at 50 per page ...\n       var pagView = new Y.PaginatorView(\n           container:  '#myPagDIV',\n           paginatorTemplate:  '#script-tmpl-mypag',\n           model:  new Y.PaginatorModel({\n               totalItems:     500,\n               itemsPerPage:   50\n           })\n       }).render();\n\n<h4>View 'container'</h4>\nThe [container](#attr_container) attribute is the only **REQUIRED** attribute for this View, primarily because we need to know *where* to\nconstruct it positionally on the page.\n\nThis view has been designed such that the `container` setting can be either (a) an actual Y.Node instance OR\n(b) a DOM css selector ID ... assumed if the container setting is a {String} with the first character is '#'.\n\n<h4>Paginator HTML Template</h4>\nThe \"HTML template\" for this PaginatorView is the guts of displaying the user interface.  We refer to this as the \"template\" because it\ntypically contains standard HTML but also includes \"replacement tokens\" identified by ```{your token here}``` curly braces.\n\nA definition of HTML Template for the paginator can be achieved through several methods;\n<ul>\n   <li>Including the HTML template as content within the original `container` DOM element ... template retrived via .getHTML()</li>\n   <li>Setting the <a href=\"#attr_paginatorTemplate\">paginatorTemplate</a> attribute to either the template 'string', or giving a SCRIPT template DOM[id] or Y.Node</li>\n   <li>Doing neither of the above ... where the default template is used (from <a href=\"#property_TMPL_PAGINATOR\">TMPL_PAGINATOR</a> static property)</li>\n</ul>\n(Note: If for some reason it is desired to not have a \"template\" (because you are rendering one outside of this view), setting\n```paginatorTemplate:''``` will override the default.)\n\nA noteworthy component of the \"HTML template\" includes the token **```{pageLinks}```**, which signifies where links generated by this\nview for each page selector are to be placed.  In some instances (e.g. a Paginator Bar, with an INPUT[text] for page #) you may not\ndesire to have every link generated ... (think of a paginator with hundreds of pages, thus hundreds of links).\n\nA sub-template is used to generate the \"{pageLinks}\" content, please see attribute [pageLinkTemplate](#attr_pageLinkTemplate) for\ninformation.\n\nFor a listing of all recognized *\"replaceable tokens\"* that can be included in the template is shown on the [render](#method_render) method\nAPI page.\n\n<h6>Data Attribute</h6>\nA key takeaway for using this View is that page links (i.e. actionable selectable elements, such as A, BUTTON, DIV, etc...) for a specific\npage use an HTML \"data\" attribute which defines the page associated with the link.\n\nThe data attribute used within the view is `data-pglink`, and can have a value setting of \"first\", \"last\", \"prev\", \"next\" or any\nnumeric page number.\n\nFor example, the following are all valid page link identifiers;\n\n       <a href=\"#\" data-pglink=\"last\" title=\"Last Page\">Last</a>\n       <button data-pglink=\"6\" class=\"myBtn\">Page 6</button>\n       <select><option data-pglink=\"19\" value=\"19\">Page 19 : Rows 9501 - 10000</option></select>\n\n\n<h4>Connecting to \"other\" UI Elements / Widgets</h4>\nThis View can be restricted to situations where the use desires to construct their own unique `pageLinkTemplate` and create their own\n`events` attribute to set listeners.\n\nFor example, the PaginatorView's [render](#event_render) event can be listened for to ensure\nthat the paginator has been initialized and setup.\n\nAdditionally the [pageChange](#event_pageChange) event (of the view) can be listened for to do any updating to user-specified page links and\nor a supporting YUI Widget.\n\nPlease see the examples for a guide on how to achieve this.",
            "extends": "Y.View",
            "version": "1.0.1",
            "since": "3.6.0"
        }
    },
    "classitems": [
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 32,
            "description": "This plugin can be accessed from a Calendar instance as \"Calendar.jumpnav\"",
            "itemtype": "property",
            "name": "NS",
            "type": "{String}",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 40,
            "description": "name for this plugin",
            "itemtype": "property",
            "name": "NAME",
            "type": "{String}",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 50,
            "itemtype": "attribute",
            "name": "yearStart",
            "type": "Number",
            "default": "1985",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 60,
            "itemtype": "attribute",
            "name": "yearEnd",
            "type": "Number",
            "default": "Current year",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 70,
            "description": "The x,y offset (horiz, vert) that should be used to offset the popup Panel from the original Calendar \"header label\"\n that was clicked.",
            "itemtype": "attribute",
            "name": "offsetXY",
            "type": "Array",
            "default": "[ 30, 10 ]",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 82,
            "description": "Sets the Event \"type\" that is used in the Calendar \"header label\" listener to open the popup Panel.\nSensible values are \"click\" or \"dblclick\".",
            "itemtype": "attribute",
            "name": "openEventType",
            "type": "String",
            "default": "'click'",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 95,
            "description": "This flag sets whether the Panel instance should be hidden after the \"Go\" button is pressed",
            "itemtype": "attribute",
            "name": "closeAfterGo",
            "type": "Boolean",
            "default": "true",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 113,
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 123,
            "description": "Destroys the View that was created and detaches its event listeners",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 135,
            "description": "Connector method that initializes the View and connects it to the Calendar instance",
            "itemtype": "method",
            "name": "_afterHostRenderEvent",
            "access": "private",
            "tagname": "",
            "class": "Y.Plugin.Calendar.JumpNav"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 185,
            "description": "Defines event objects as part of View's event handling, specifically defines actions to\nbe taken on \"change\" events of the month and year SELECT controls.",
            "itemtype": "property",
            "name": "events",
            "type": "Object",
            "static": 1,
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 197,
            "description": "Default setting for the `template` attribute that defines the Panel HTML contents, including\nthe SELECT options for month and year.",
            "example": [
                "\n\t// Where classPanel is replaced by 'yui3-calendar-jumpnav-panel',\n\t// and classMonth by 'yui3-calendar-jumpnav-month'\n\t// and classYear by 'yui3-calendar-jumpnav-year'\n\t<div class=\"{classPanel}\">\n\t\t<div class=\"yui3-widget-bd\">\n\t\t<table>\n\t\t\t<tr><td align=\"right\">Jump to Month:</td><td><select class=\"{classMonth}\"></select></td></tr>\n\t\t\t<tr><td align=\"right\">and Year:</td><td><select class=\"{classYear}\"></select></td></tr>\n\t\t</table>\n\t\t</div>\n\t</div>"
            ],
            "itemtype": "property",
            "name": "template",
            "type": "String HTML Setting for Panel's contents",
            "default": "See example below",
            "static": 1,
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 227,
            "description": "Placeholder for the Y.Panel instance used in this view",
            "itemtype": "property",
            "name": "_panel",
            "type": "Y.Panel",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 236,
            "description": "Holder for an array of the Listeners created by this view so we can detach them when finished",
            "itemtype": "property",
            "name": "_subscr",
            "type": "Array",
            "default": "[]",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 245,
            "description": "Stores the classname to search the Calendar instance for to hook onto the \"header-label\" element",
            "itemtype": "property",
            "name": "_classCalHead",
            "type": "String",
            "default": "'yui3-calendar-header-label'",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 254,
            "description": "Stores the classname used internally for the Panel srcNode used in this view",
            "itemtype": "property",
            "name": "_classPanel",
            "type": "String",
            "default": "'yui3-calendar-jumpnav-panel'",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 264,
            "description": "Placeholder for the Node instance for this view, set to Panel contentBox",
            "itemtype": "property",
            "name": "_viewNode",
            "type": "Node",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 273,
            "description": "Stores the classname used internally for the Panel's \"month\" SELECT control",
            "itemtype": "property",
            "name": "_classMonth",
            "type": "String",
            "default": "'yui3-calendar-jumpnav-month'",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 282,
            "description": "Stores the classname used internally for the Panel's \"month\" SELECT control",
            "itemtype": "property",
            "name": "_classYear",
            "type": "String",
            "default": "'yui3-calendar-jumpnav-year'",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 294,
            "description": "Initializer that creates the `container`, the Panel instance and listeners for this view",
            "itemtype": "method",
            "name": "initializer",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 338,
            "description": "Renders the Panel and resets the SELECT controls \"selected\" default to the current Calendar data setting",
            "itemtype": "method",
            "name": "render",
            "chainable": 1,
            "return": {
                "description": "this"
            },
            "access": "protected",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 379,
            "description": "Clears up the created listeners and destroys the Panel",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 401,
            "itemtype": "method",
            "name": "_createPanelView",
            "params": [
                {
                    "name": "vnode",
                    "description": "The Node that was created from `template` that will be used as the container for the Y.Panel creation.",
                    "type": "Node"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 446,
            "description": "Sets the currently \"selected\" OPTION for the month control to the current month",
            "itemtype": "method",
            "name": "_setSelectedMonth",
            "params": [
                {
                    "name": "curDate",
                    "description": "",
                    "type": "Date"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 457,
            "description": "Sets the currently \"selected\" OPTION for the year control to the current year.\n<br/>This method searches the OPTION nodes for \"value\" set to the year, to get around\nCSS selector issues in some browers.",
            "itemtype": "method",
            "name": "_setSelectedYear",
            "params": [
                {
                    "name": "curDate",
                    "description": "",
                    "type": "Date"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 475,
            "description": "Method that regenerates the \"month\" SELECT control, adding the months and defining the \"selected\" as the curDate parameter",
            "itemtype": "method",
            "name": "_regenMonths",
            "params": [
                {
                    "name": "curDate",
                    "description": "Current date to set as \"selected\"",
                    "type": "Date"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 502,
            "description": "Method that regenerates the \"year\" SELECT control, adding the months defined by attributes `yearStart` to `yearEnd`\nand defining the \"selected\" as the curDate parameter",
            "itemtype": "method",
            "name": "_regenYears",
            "params": [
                {
                    "name": "curDate",
                    "description": "Current date to set as \"selected\"",
                    "type": "Date"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 530,
            "description": "Helper method to check if the specified year is an option in the current SELECT control OPTIONS.",
            "itemtype": "method",
            "name": "_yearInSelect",
            "params": [
                {
                    "name": "year",
                    "description": "Year to be checked if it is in the current SELECT control",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if year is in SELECt, false if not",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 553,
            "description": "Listener on the Calendar's \"dateChange\" event to update the JumpNavigator if it's visible",
            "itemtype": "method",
            "name": "_onCalendarDateChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 569,
            "description": "Listener on the Panel's \"Go\" button, resets the Calendar to the Month/Year and first day,\nand optionally closes the Panel if `closeAfterGo` is true.",
            "itemtype": "method",
            "name": "_onGoButton",
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 587,
            "description": "\"change\" Listener on the SELECT control for the JumpNavigator's month control",
            "itemtype": "method",
            "name": "_selectMonth",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 604,
            "itemtype": "event",
            "name": "monthSelected",
            "params": [
                {
                    "name": "return",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "evt",
                            "description": "Eventtarget for the SELECT \"change\" event",
                            "type": "EventTarget"
                        },
                        {
                            "name": "value",
                            "description": "Value part of the selected OPTION, which is the selected month",
                            "type": "Number"
                        },
                        {
                            "name": "text",
                            "description": "Text from selected OPTION, which is the month name",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 612,
            "description": "\"change\" Listener on the SELECT control for the JumpNavigator's year control",
            "itemtype": "method",
            "name": "_selectYear",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 629,
            "itemtype": "event",
            "name": "yearSelected",
            "params": [
                {
                    "name": "return",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "evt",
                            "description": "Eventtarget for the SELECT \"change\" event",
                            "type": "EventTarget"
                        },
                        {
                            "name": "value",
                            "description": "Value part of the selected OPTION, which is the Selected year",
                            "type": "Number"
                        },
                        {
                            "name": "text",
                            "description": "Text from selected OPTION, which is the selected year",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 640,
            "description": "Specifies the Calendar instance that this view will be attached to for header label clicks and\nfor updates to the `date` attribute.",
            "itemtype": "attribute",
            "name": "calendar",
            "type": "Y.Calendar",
            "default": "null",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 653,
            "description": "Defines the HTML content that is used to setup the Y.Panel instance that is created by this View.\nSee the property [template](#property_template) for the default setting.",
            "itemtype": "attribute",
            "name": "template",
            "type": "String",
            "default": "this.template",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 666,
            "description": "Sets the beginning year that will be used to setup the \"year\" SELECT dropdown control, defaults to\na favorite year of the author's.",
            "itemtype": "attribute",
            "name": "yearStart",
            "type": "Number",
            "default": "1985",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 678,
            "description": "Sets the last year that should be setup within the \"year\" SELECT dropdown control, defaults the\nthe current year.",
            "itemtype": "attribute",
            "name": "yearEnd",
            "type": "Number",
            "default": "Current year",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 690,
            "description": "The x,y offset (horiz, vert) that should be used to offset the popup Panel from the original Calendar \"header label\"\n that was clicked.",
            "itemtype": "attribute",
            "name": "offsetXY",
            "type": "Array",
            "default": "[ 30, 10 ]",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 703,
            "description": "Sets the Event \"type\" that is used in the Calendar \"header label\" listener to open the popup Panel.\n         Sensible values are \"click\" or \"dblclick\".",
            "itemtype": "attribute",
            "name": "openEventType",
            "type": "String",
            "default": "'click'",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/calendar-jumpnav.js",
            "line": 715,
            "description": "This flag sets whether the Panel instance should be hidden after the \"Go\" button is pressed",
            "itemtype": "attribute",
            "name": "closeAfterGo",
            "type": "Boolean",
            "default": "true",
            "class": "Y.Calendar.JumpNavView"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 39,
            "description": "Y.View's events static property, where we define a \"click\" listener on Nodes in the\ncontainer that are the MenuItem nodes.                    *",
            "itemtype": "property",
            "name": "events",
            "type": "{Object}",
            "access": "public",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 52,
            "description": "Default HTML template for the container's content         *",
            "itemtype": "property",
            "name": "template",
            "type": "{String}",
            "default": "'<div class=\"yui3-contextmenu-overlay\"></div>'",
            "access": "public",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 61,
            "description": "A placeholder to hold subscriber EventHandles so they can be destroyed properly",
            "itemtype": "property",
            "name": "_subscr",
            "type": "{Array}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 72,
            "description": "Sets an increment that the Overlay box will be positioned relative to the e.target \"x-coordinate\"",
            "itemtype": "property",
            "name": "_overlayDX",
            "type": "{Integer}",
            "default": "5",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 81,
            "description": "Sets an increment that the Overlay box will be positioned relative to the e.target \"y-coordinate\"",
            "itemtype": "property",
            "name": "_overlayDY",
            "type": "{Integer}",
            "default": "11",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 90,
            "description": "Initializer where we define initial handlers to invoke this view and to hide the Overlay",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 110,
            "description": "Clean up listeners and destroys the Overlay",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 130,
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 142,
            "description": "Method that hides the Overlay for this contextmenu and fires the `contextMenuHide` event",
            "itemtype": "method",
            "name": "hideOverlay",
            "access": "public",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 154,
            "description": "Default value setter for attribute `overlay`, creates a Y.Overlay widget to display the menu within",
            "itemtype": "method",
            "name": "_valOverlay",
            "return": {
                "description": "",
                "type": "Y.Overlay"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 194,
            "description": "Handler for right-click event (actually \"contextmenu\" event) on `trigger.node`.",
            "itemtype": "method",
            "name": "_onContextMenu",
            "params": [
                {
                    "name": "e",
                    "description": "Y.Event target object created when \"context\" menu fires",
                    "type": "EventTarget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 222,
            "description": "Fired after the \"contextmenu\" event is initiated and the Menu has been positioned and displayed",
            "itemtype": "event",
            "name": "contextMenuShow",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 229,
            "description": "Process a \"click\" event on the Content Menu's Overlay menuItems",
            "itemtype": "method",
            "name": "_selectMenuItem",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 253,
            "description": "Fires when a selection is \"clicked\" from within the pop-up menu\n(a better approach is to listen on attribute [selectedMenu](#attr_selectedMenu) for \"change\")",
            "itemtype": "event",
            "name": "select",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 261,
            "description": "Fired after a Menu choice has been selected from the ContexMenu and the menu has been hidden",
            "itemtype": "event",
            "name": "contextMenuHide",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 267,
            "description": "Helper method to clear DOM \"selected\" text or ranges",
            "itemtype": "method",
            "name": "_clearDOMSelection",
            "access": "private",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 281,
            "description": "Container Node where the menu's Overlay will be rendered into.  If not provided, the\ndefault will create a container from the [template](#property_template) setting.\n\nThis is usually only set when the user has a specific Overlay container design they\nwish to utilize.",
            "itemtype": "attribute",
            "name": "container",
            "type": "{Node}",
            "default": "Y.Node.create(this.template)",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 296,
            "description": "Defines the container element for the \"contextmenu\" event listener to attach this menu to.\n<br/><br/>This {Object} must contain the following;<br/>\n<ul>\n  <li>`node` {Node} the Node instance that will have a delegated \"contextmenu\" listener\n       attached to it</li>\n           <li>`target` {String} A CSS selector for the \"target\" sub-element (child of trigger.node) that will be used for the delegation and will be returned from attribute \"contextTarget\"</li>\n</ul>",
            "example": [
                "\n      // This will define the trigger node (to accept right-clicks) as a DataTable's THEAD\n      //  element and the target as the TH nodes.\n      trigger : {\n          node:   myDataTable.get('srcNode').one('thead .yui3-datatable-columns'),\n          target: \"th\"\n      }"
            ],
            "itemtype": "attribute",
            "name": "trigger",
            "type": "{String} trigger.target Container filter selector to assign target from container event",
            "default": "{node:null, target:''}",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 326,
            "description": "Set to the returned target within the `trigger.node` container that the \"contextmenu\" event was initiated on\n(e.g. for a DataTable this may be a specific TR row within the table body).",
            "itemtype": "attribute",
            "name": "contextTarget",
            "type": "{Node}",
            "default": "null",
            "readonly": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 340,
            "description": "Overrideable HTML template to use for creating each `menuItem` entry in Overlay.\nMust include \"data-cmenu\"",
            "itemtype": "attribute",
            "name": "menuItemTemplate",
            "type": "{String}",
            "default": "'<div class=\"{menuClass}\" data-cmenu=\"{menuIndex}\">{menuContent}</div>'",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 352,
            "description": "Array of \"menu\" items as either {Strings} or {Objects} to add to the Menu.\n\nWhen {Objects} are included, as a minimum they must include a `label` property that contains the text to display in the menu.",
            "example": [
                "\n\tmenuItems: [ \"one\", \"two\", \"three\", \"four\" ]\n\tmenuItems: [ \"Insert\", \"Update\", {label:\"Delete\", confirm:true}, \"... More\" ]\n\tmenuItems: [ {label:\"Foo\", value:100}, {label:\"Bar\", value:105}, {label:\"Baz\", value:200} ]"
            ],
            "itemtype": "attribute",
            "name": "menuItems",
            "type": "{Array}",
            "default": "[]",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 370,
            "description": "Y.Overlay instance used to render the pop-up context menu within\n\n**Default:** See [_valOverlay](#method__valOverlay)",
            "itemtype": "attribute",
            "name": "overlay",
            "type": "Y.Overlay",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/contextmenu-view.js",
            "line": 383,
            "description": "Set to the \"selected\" item from the pop-up Overlay menu when clicked by user, where this\nattribute is set to an object containing the EventTarget of the selection and the resulting\nmenuitem and menuindex that corresponds to the selection.\n\nThis is set by the method [_selectMenuItem](#method__selectMenuItem).\n\nSet to an {Object} with the following properties;\n  <ul>\n  <li>`evt` Event target from \"click\" selection within displayed Overlay</li>\n  <li>`menuItem` Menuitem object entry selected from `menuItems` array</li>\n  <li>`menuIndex` Index of current Menuitem object within the [menuItems](#attr_menuItems) attribute array</li>\n  </ul>",
            "example": [
                "\n\t// If the 'selectedMenu' was set to the 2nd item from the following menuItems setting ...\n\tmyCmenu.set('menuItems',[ {label:\"Foo\", value:100}, {label:\"Bar\", value:105}, {label:\"Baz\", value:200} ]);\n\n\t// ... user clicks 2nd item,\n\tmyCmenu.get('selectedMenu')\n\t// returns {evt:'event stuff object', menuItem:{label:\"Bar\", value:105}, menuIndex:1 }"
            ],
            "itemtype": "attribute",
            "name": "selectedMenu",
            "type": "{Object} obj",
            "readonly": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 44,
            "description": "Holder for the EventHandle for the \"select all\" INPUT[checkbox] click handler in the TH\n(set via delegate in _bindCheckboxSelect)",
            "itemtype": "property",
            "name": "_subscrChkAll",
            "type": "Array",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 55,
            "description": "Holder for the EventHandle for the individual INPUT[checkbox]'s click handler within each TR\n(set via delegate in _bindCheckboxSelect)",
            "itemtype": "property",
            "name": "_subscrChk",
            "type": "Array",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 66,
            "description": "Placeholder for the \"checkbox\" currently selected records, stored in 'primary key value' format.",
            "itemtype": "property",
            "name": "_chkRecords",
            "type": "Array",
            "default": "[]",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 76,
            "description": "HTML template for creation of the TH column of the \"checkbox\" select column.",
            "itemtype": "property",
            "name": "tmplTH",
            "type": "String",
            "default": "'<input type=\"checkbox\" class=\"{className}\" title=\"{columnTitleTH}\"/>'",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 86,
            "description": "Key name of the \"checkbox\" select column that is added to DataTable's column configurations",
            "itemtype": "property",
            "name": "colSelect",
            "type": "String",
            "default": "'chkSelect'",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 97,
            "description": "Initializer, doesn't really do anything at this point ...",
            "itemtype": "method",
            "name": "initializer",
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 112,
            "description": "Unbinds the checkbox listeners and detaches any others created",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 125,
            "description": "Method that selects all \"checkboxes\" to checked, adds all records to the selected records and\nchecks the \"Select All\" checkbox.",
            "itemtype": "method",
            "name": "checkboxSelectAll",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 149,
            "description": "Fires after the \"select all\" checkbox is clicked and all records are selected",
            "itemtype": "event",
            "name": "checkboxSetAll",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 154,
            "description": "Method that resets all \"checkboxes\" to unchecked, zeros the selected records and\nunchecks the \"Select All\" checkbox.",
            "itemtype": "method",
            "name": "checkboxClearAll",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 172,
            "description": "Fires after the \"select all\" checkbox is clicked and all records are cleared",
            "itemtype": "event",
            "name": "checkboxclearAll",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 179,
            "description": "Method that sets \"click\" events (via DataTable .delegate) on the INPUT[checkbox]'s for each \nrow TR and for the \"select all\" checkbox.",
            "itemtype": "method",
            "name": "_bindCheckboxSelect",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 190,
            "description": "Method to detach all of the listeners created by this class",
            "itemtype": "method",
            "name": "_unbindCheckboxSelect",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 202,
            "description": "Enables this class, by clearing the selected records, creating the UI elements and adding checkbox listeners.",
            "itemtype": "method",
            "name": "_enableCheckboxSelect",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 213,
            "description": "Disables this class, by clearing all selectors and remove the UI element and detaching listeners",
            "itemtype": "method",
            "name": "_enableCheckboxSelect",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 224,
            "description": "Setter method for attribute (checkboxSelectMode)[#attr_checkboxSelectMode] that toggles this extension on/off",
            "itemtype": "method",
            "name": "_setCheckboxSelectMode",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 238,
            "description": "Getter method for [checkboxSelected](#attr_checkboxSelected) attribute, that returns the currently \"checkbox\" selected\nrows, returned as an array of {Object}s containing members {tr,record,pkvalues}.\n\t <br/><br/><b>Returns:</b> {Array} of {Objects} selected for each row as;\n\t <ul>\n\t <li>`selected.tr` : TR Node for the checkbox selected row</li>\n\t <li>`selected.record` : Model instance for the selected data record</li>\n\t <li>`selected.pkvalues` Primary key value settings for the selected record (single value or {Object} if more than one primary key is set)</li>\n\t </ul>",
            "itemtype": "method",
            "name": "_getCheckboxSelected",
            "return": {
                "description": "See above"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 266,
            "description": "Setter method for [checkboxSelected](#attr_checkboxSelected) attribute, currently only supports on input an\nArray of record indices that should be initially \"checkbox\" selected.\n\nTODO:  Need to add initial selections as \"primary key\" values",
            "itemtype": "method",
            "name": "_setCheckboxSelected",
            "params": [
                {
                    "name": "rows",
                    "description": "Array of row indices to initially set as \"checked\"",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 300,
            "description": "Method that returns a boolean flag indicating whether the entered record represents\na record that is currently selected (i.e. in this._chkRecords).\n\nThis is principally used by the formatter function for the checkbox column.",
            "itemtype": "method",
            "name": "_getCheckboxSelectedFlag",
            "params": [
                {
                    "name": "rec",
                    "description": ""
                }
            ],
            "return": {
                "description": "selected Either \"true\" or \"false\" depending on whether the entered row is currently \"checked\"",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 324,
            "description": "Click handler for the added in the checkbox select INPUT[checkbox]",
            "itemtype": "method",
            "name": "_onCheckboxSelect",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 351,
            "description": "Click handler for the TH \"check ALL\" INPUT[checkbox]",
            "itemtype": "method",
            "name": "_onCheckboxSelectAll",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 368,
            "description": "Adds a new Column with the TH element",
            "itemtype": "method",
            "name": "_uiAddCheckboxTH",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 403,
            "description": "Removes the \"checkbox\" select column from the DataTable columns attribute",
            "itemtype": "method",
            "name": "_uiRemoveCheckboxTH",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 413,
            "description": "Method that updates the UI on each record's INPUT[checkbox] and sets them to the entered setting (true,false).",
            "itemtype": "method",
            "name": "_uiCheckboxSetEach",
            "params": [
                {
                    "name": "bool",
                    "description": "Flag indicating whether checks should be set or not",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 427,
            "description": "Method that updates the UI on the \"select all\" INPUT[checkbox] and sets it to the entered setting (true,false).",
            "itemtype": "method",
            "name": "_uiCheckboxSetEach",
            "params": [
                {
                    "name": "bool",
                    "description": "Flag indicating whether the check should be set or not",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 441,
            "description": "Default value method for the (primaryKeys)[#attr_primaryKeys] attribute.  This method will search\nthe defined DataTable \"columns\" attribute array and loop over each column, if a column has a\nproperty \"primaryKey\" that column will be added as a primary key.",
            "example": [
                "\n       var cols = [ {key:'cust_id', label:'Cust ID', primaryKey:true},\n               {key:'ord_date', label:'Order Date'},\n               {key:'ord_id', label:'Order ID', primaryKey:true}\n               ....\n           ];\n       // will result in ATTR \"primaryKeys\" as [ 'cust_id', 'ord_id' ]"
            ],
            "itemtype": "method",
            "name": "_valPrimaryKeys",
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 472,
            "description": "Setter method for the the (primaryKeys)[#attr_primaryKeys] attribute, where the input values can be\neither (a) a single {String} column key name or (b) an {Array} of column key names in {String} format.\n\nNOTE: If this attribute is set, it will over-ride any \"primaryKey\" entries from the \"columns\".",
            "itemtype": "method",
            "name": "_setPrimaryKeys",
            "params": [
                {
                    "name": "pkn",
                    "description": "Column key (or column name) entries, either a single {String} name or an array of {Strings}",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 494,
            "description": "Returns the corresponding record (Model) for the entered primary key setting (pkv),\nwhere pkv can be either a single value or an object (for multiple primary keys).",
            "itemtype": "method",
            "name": "_getRecordforPKvalue",
            "params": [
                {
                    "name": "pkv",
                    "description": "Primary key setting to search ModelList for",
                    "type": "Number|String|Date|Object"
                }
            ],
            "return": {
                "description": "record Returns the record (Model) that corresponds to the key setting in pkv",
                "type": "Model"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 521,
            "description": "Method that returns the primary key values for the provided record \"rec\", either as an\nindividual value (for a single primary key) or as an {Object} in key:value pairs where the\nkey is the primary key name and the value is the value from this record.",
            "example": [
                "\n       // For a record with rec = {cust_id:157, cust_name:'foo', odate:'9/12/2009', ord_no:987}\n       this._getPKValues(rec);  // for one primary key \"cust_id\"  RETURNS 157\n       this._getPKValues(rec);  // for primary keys \"cust_id\", \"ord_no\"  RETURNS {cust_id:157,ord_no:987}"
            ],
            "itemtype": "method",
            "name": "_getPKValues",
            "params": [
                {
                    "name": "rec",
                    "description": "The record Model that the primary key values are requested for",
                    "type": "Model"
                }
            ],
            "return": {
                "description": "pkv Returns the primary key values as a single value or an object key:value hash",
                "type": "Mixed|Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 553,
            "description": "Function that searches an Array of Objects, looking for a matching partial object as defined by key_vals {Object},\nand returning the index of the first match.",
            "itemtype": "method",
            "name": "_indexOfObjMatch",
            "params": [
                {
                    "name": "arr",
                    "description": ""
                },
                {
                    "name": "key_vals",
                    "description": ""
                }
            ],
            "return": {
                "description": "imatch Returned index number of first match, or -1 if none found",
                "type": "Integer"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 583,
            "description": "Attribute that is used to trigger \"checkbox\" selection mode, and inserting of a checkbox select\ncolumn to the current DataTable.",
            "itemtype": "attribute",
            "name": "checkboxSelectMode",
            "type": "{Boolean}",
            "default": "false",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 598,
            "description": "Attribute that is used to retrieve the \"checkbox\" selected records from the DataTable at any time. \n\nAlso can be used to set initially \"checked\" records by entering an {Array} of record indices. (See method [_setCheckboxSelected](#method__setCheckboxSelected)).\n\n\nWhen a `get('checkboxSelected')` is requested, an {Array} of {Objects} containing members as \n{tr,record,pkvalues} is returned for each checked row. (See method [_getCheckboxSelected](#method__getCheckboxSelected)).",
            "itemtype": "attribute",
            "name": "checkboxSelected",
            "type": "{Array}",
            "default": "[]",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-checkbox-select.js",
            "line": 618,
            "description": "Attribute to set the \"primary keys\" for the DataTable that uniquely define the record (Model) attributes \nto use to search for specific records.  \n\nPrimary keys can be defined either with this attribute `primaryKeys` OR by placing an extra object property\nin the DataTable column configuration as \"primaryKey:true\".\n\nThis attribute is more useful in use cases where the primary key is not displayed in a column.",
            "example": [
                "\n\t // sets a single primary key to data field with key:'emp_id'\n\t myDT.set('primaryKeys','emp_id');       \t\t\n\t\t\n\t // sets dual primary keys to two data fields with key:'inventory_id' and key:'lot_id'\n\t myDT.set('primaryKeys',['inventory_id','lot_id']);  \n\t // OR\n\t var myDT = new Y.DataTable({\n\t \tcolumns: [ \n\t \t\t{key:'inventory_id', label:'Inventory Code', primaryKey:true},\n\t \t\t{key:'item_code', label:'Sales Item'},\n\t \t\t{key:'lot_id', label:'Lot Code', primaryKey:true},\n\t \t\t...\n\t });"
            ],
            "itemtype": "attribute",
            "name": "primaryKeys",
            "type": "{String|Array}",
            "default": "See above",
            "class": "Y.DataTable.CheckboxSelect",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/datatable-formatters.js",
            "line": 75,
            "description": "Object containing referenceable format strings",
            "itemtype": "property",
            "name": "formatStrings",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Formatters",
            "module": "datatable",
            "submodule": "formatters"
        },
        {
            "file": "gallery-js/datatable-formatters.js",
            "line": 103,
            "description": "Formatter function called that executes a standard \"named\" formatter defined by `fmtrName`.\nThe parameter `fmtrName` maps to a member of the \"formatStrings\" object, that includes a type\ndeclaration and a formatConfig string to be substituted in the DataType.Number.format or Date.format\nfunction.",
            "itemtype": "method",
            "name": "namedFormatter",
            "params": [
                {
                    "name": "fmtrName",
                    "description": "Name of formatter object from \"formatStrings\", i.e. \"currency2\", \"fullDate\"",
                    "type": "String"
                },
                {
                    "name": "o",
                    "description": "The passed-in column formatter object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "value",
                "type": "Mixed"
            },
            "class": "Y.DataTable.Formatters",
            "module": "datatable",
            "submodule": "formatters"
        },
        {
            "file": "gallery-js/datatable-formatters.js",
            "line": 131,
            "description": "Override of method _createRowHTML from DataTable.BodyView extended to permit use of named\nformatter functions from Y.DataTable.Formatters.\n\nAdditional functionality was added to facilitate using a template approach for {o.value} within\nthe column, by using Y.Lang.sub (as fromTemplate) with the replacement object hash provided\nas column configuration \"formatConfig\" (o.column.formatConfig).",
            "itemtype": "method",
            "name": "Y.DataTable.BodyView._createRowHTML",
            "params": [
                {
                    "name": "model",
                    "description": ""
                },
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "columns",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Formatters",
            "module": "datatable",
            "submodule": "formatters"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 71,
            "description": "Adds a paginator view (specifically Y.PaginatorView) instance to the DataTable.",
            "itemtype": "attribute",
            "name": "paginator",
            "type": "Y.View",
            "default": "null",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 83,
            "description": "Defines a hash to convert expected PaginatorModel attributes to outgoing request queryString\nor returned (incoming response) meta data back to PaginatorModel attributes.",
            "example": [
                "\n         serverPaginationMap : {\n             totalItems :    'totalRows',\n             page :          {toServer:'requestedPage', fromServer:'returnedPageNo'},\n             itemIndexStart: 'startRecord',\n             itemsPerPage:   'numPageRows'\n         }\n\n         // would map to an outgoing request of (for url:/data/orders) ;\n         /data/orders/{cust_no}?requestedPage={requestedPage}&numPageRows={numPageRows}\n\n         // for a JSON response of ...\n         { \"reply\":\"ok\", \"totalRows\":478, \"returnedPageNo\":17, \"startRecord\":340, \"numPageRows\":20,\n           \"results\":[ {...} 20 total rows returned {...}] }\n\nFor default value, see [_defPagMap](#method__defPagMap)"
            ],
            "itemtype": "attribute",
            "name": "serverPaginationMap",
            "type": "{Object}",
            "default": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 114,
            "description": "Attribute to track the full pagination state (i.e. the PaginatorModel) attributes all in one object.\nAlso includes the `sortBy` property internally.",
            "itemtype": "attribute",
            "name": "paginationState",
            "type": "Object",
            "default": "unset",
            "beta": 1,
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 129,
            "description": "(SERVER DataSource only!)\nIncludes the request queryString for a DataSource request (only!), which contains the pagination\nreplacement strings to be appended to the DataSource's \"source\" string.",
            "example": [
                "\n         requestStringTemplate:  \"?currentPage={page}&pageRows={itemsPerPage}&sorting={sortBy}\"\n\nNote, the replacement parameters within this template should match the settings from the PaginatorModel\nattributes.\n\nIn cases where your server expects differing query parameters, you can utilize ATTR [serverPaginationMap](#attr_serverPaginationMap)."
            ],
            "itemtype": "attribute",
            "name": "requestStringTemplate",
            "type": "String",
            "default": "\"\"",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 151,
            "description": "Flag to indicate if the Paginator container should be re-sized to the DataTable size\nafter rendering is complete.\n\nThis attribute works best with a \"bar\" type of Paginator that is intended to look integral with a DataTable.",
            "itemtype": "attribute",
            "name": "paginatorResize",
            "type": "Boolean",
            "default": "false",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 170,
            "description": "Holder for the \"original\" un-paged data that the DataTable was based upon.\n\nThis property is stored as an Array, from the original \"data\" ModelList, only used\nfor case of \"local\" data, is sliced as needed to re-set each data Page.\n\nPopulated in method [_dataChange](#method__dataChange)",
            "itemtype": "property",
            "name": "_mlistArray",
            "type": "Array",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 188,
            "description": "Placeholder for a text flag indicating the source of \"data\" for this DataTable,\n this is set initially in method _dataChange.\n\nSet to either 'local', 'ds' or 'mlist' in method [_dataChange](#method__dataChange)\n\nPopulated in _dataChange.  Utilized in processPageRequest",
            "itemtype": "property",
            "name": "_pagDataSrc",
            "type": "String",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 205,
            "description": "A convenience property holder for the DataTable's \"paginator\" attribute.",
            "itemtype": "property",
            "name": "paginator",
            "type": "{Y.PaginatorView|View}",
            "default": "null",
            "access": "public",
            "tagname": "",
            "since": "3.6.0",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 216,
            "description": "A convenience property holder for the Paginator-View's Model attribute.",
            "itemtype": "property",
            "name": "pagModel",
            "type": "{Y.PaginatorModel|Model}",
            "default": "null",
            "access": "public",
            "tagname": "",
            "since": "3.6.0",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 230,
            "description": "This initializer sets up the listeners related to the original DataTable instance, to the\n PaginatorModel changes and related to the underlying \"data\" attribute the DT is based upon.",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 279,
            "description": "Destructor to clean up listener event handlers and the internal storage buffer.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 298,
            "description": "Primary workhorse method that is fired when the Paginator \"page\" changes,\n  and returns a new subset of data for the DT\n  or sends a new request to a remote source to populate the DT",
            "itemtype": "method",
            "name": "processPageRequest",
            "params": [
                {
                    "name": "page_no",
                    "description": "Current page number to change to",
                    "type": "Integer"
                },
                {
                    "name": "pag_state",
                    "description": "Pagination state object (this is NOT populated in local .. non-server type pagination) including;",
                    "type": "Object",
                    "props": [
                        {
                            "name": "indexStart",
                            "description": "Starting index returned from server response",
                            "type": "Integer"
                        },
                        {
                            "name": "numRecs",
                            "description": "Count of records returned from the response",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "access": "public",
            "tagname": "",
            "return": {
                "description": "nothing"
            },
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 399,
            "description": "Method to sync the container for the paginator View with the underlying DataTable\n 'table' element.\n\n Unfortunately, there isn't a distinct, definitive 'render' complete event due to\n  DT's complex rendering, so I use a timer function to attempt a resize.",
            "itemtype": "method",
            "name": "resizePaginator",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 417,
            "description": "Method to re-initialize the original data, mostly targeted at local data\n when a new 'data' is set, untested.",
            "itemtype": "method",
            "name": "dataReset",
            "params": [
                {
                    "name": "data",
                    "description": "Data to be reset to ... either as a JS Array or a Y.ModelList",
                    "type": "Array|ModelList"
                }
            ],
            "access": "public",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "beta": 1,
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 447,
            "description": "Helper method that searches the 'serverPaginationMap' ATTR and returns the requested\nproperty, including if it is nested as \"toServer\" or \"fromServer\" subattribute.\n( Used in processPageRequest )",
            "example": [
                "\n   _srvPagMapObj(\"itemsPerPage\")\n        { itemsPerPage : 'numPageRecords' }\n        { itemsPerPage : {toServer:'pageRows', fromServer:'pageRecordCount' }"
            ],
            "itemtype": "method",
            "name": "_srvPagMapObj",
            "params": [
                {
                    "name": "prop",
                    "description": "Property name to search for (expected matches in PaginatorModel ATTRS)",
                    "type": "String"
                },
                {
                    "name": "dir",
                    "description": "Directional (optional), either \"to\" (matches toServer) or \"from\" (matches fromServer)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "rprop Attribute name from RHS of map",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 476,
            "description": "Method called to ensure that the _dataChange method is called, specifically for the case\nwhere a DataSource is used (which is hard to track when it is plugged in ...)",
            "itemtype": "method",
            "name": "_afterSyncUI",
            "params": [
                {
                    "name": "o",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 488,
            "description": "Method fires after every variety of change event on the DT's \"data\" setting, which\nis used to sense the origin of where the \"data\" comes from, and sets the\nthis._pagDataSrc property to either \"ds\", \"mlist\" or \"local\".",
            "itemtype": "method",
            "name": "_dataChange",
            "params": [
                {
                    "name": "o",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 549,
            "description": "Method fires after DataTable/DataSource plugin fires it's \"response\" event, which includes\nthe response object, including {results:, meta:} properties.",
            "itemtype": "method",
            "name": "_afterDSResponse",
            "params": [
                {
                    "name": "resp",
                    "description": "Includes results and meta properties",
                    "type": "Object",
                    "props": [
                        {
                            "name": "results",
                            "description": "Array of result Objects",
                            "type": "Array"
                        },
                        {
                            "name": "meta",
                            "description": "Object including properties mapped to include pagination properties",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 572,
            "description": "Method fires after custom ModelSync.REST \"load\" action fires a user-defined \"response\" event.\nThis can be implemented by extending ModelSync.REST by adding .parse() method which fires\na custom \"response\" event including {results:, meta:} properties.\n\nUsage Note: The user is REQUIRED to provide a custom \"response\" event in the ModelList\n parse overridden function in order for this to work properly.",
            "itemtype": "method",
            "name": "_afterMLResponse",
            "params": [
                {
                    "name": "resp",
                    "description": "Includes results and meta properties",
                    "type": "Object",
                    "props": [
                        {
                            "name": "results",
                            "description": "Array of result Objects",
                            "type": "Array"
                        },
                        {
                            "name": "meta",
                            "description": "Object including properties mapped to include pagination properties",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 597,
            "description": "Listener that fires when the Model's 'pageChange' fires, this extracts the current page from the state object and then\n hooks up the processPageRequest method.",
            "itemtype": "method",
            "name": "_pageListener",
            "params": [
                {
                    "name": "o",
                    "description": "Change event facade for the PaginatorModel 'pageChange' event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 611,
            "description": "Method to adjust the CSS width of the paginator container and set it to the\n width of the underlying DT.",
            "itemtype": "method",
            "name": "_syncPaginatorSize",
            "return": {
                "description": "Boolean if success"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 629,
            "description": "Default 'valueFn' function setting for the ATTR `serverPaginationMap`, where\nthe defaults are simply the member names.",
            "itemtype": "method",
            "name": "_defPagMap",
            "return": {
                "description": "obj",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 645,
            "description": "Setter method for the `serverPaginationMap` attribute, which can be used to\n merge the \"default\" object with the user-supplied object.",
            "itemtype": "method",
            "name": "_setPagMap",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 659,
            "description": "Sets default for the \"paginationState\" DataTable attribute complex object as an\nobject with all of PaginatorModel ATTRS and the `sortBy` setting.",
            "itemtype": "method",
            "name": "_defPagState",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 675,
            "description": "Getter for the \"paginationState\" DataTable attribute complex object.",
            "itemtype": "method",
            "name": "_gefPagState",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 688,
            "description": "Sets default for the \"paginationState\" DataTable attribute\n complex object.",
            "itemtype": "method",
            "name": "_sefPagState",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 706,
            "description": "This is a setter for the 'paginator' attribute, primarily to set the public property `paginator` to the\nattribute value.",
            "itemtype": "method",
            "name": "_setPaginator",
            "params": [
                {
                    "name": "val",
                    "description": "The PaginatorView instance to set",
                    "type": "PaginatorView|View"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 724,
            "description": "A method that fires after the DataTable `renderView` method completes, that is *approximately* when\nthe DataTable has finished rendering.",
            "itemtype": "method",
            "name": "_notifyRender",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 739,
            "description": "Fires after the DataTable 'renderView' event fires",
            "itemtype": "event",
            "name": "render",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 744,
            "description": "Fires after the DataTable-Paginator updates the page data and/or sends the remote request for more data",
            "itemtype": "event",
            "name": "pageUpdate",
            "params": [
                {
                    "name": "pagStatus",
                    "description": "containing following;",
                    "type": "Object",
                    "props": [
                        {
                            "name": "pag_state",
                            "description": "Of Paginator Model `getAttrs()` as an Object",
                            "type": "Object"
                        },
                        {
                            "name": "view",
                            "description": "Instance of the Paginator View",
                            "type": "View"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/datatable-paginator-class.js",
            "line": 752,
            "description": "Fires after the Paginator is resized to match the DataTable size (requires attribute \"paginatorResize:true\")",
            "itemtype": "event",
            "name": "resize",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 92,
            "description": "Defines the default TD HTML template for a calculated field within the footer",
            "itemtype": "property",
            "name": "TMPL_td",
            "type": "String",
            "default": "'<td class=\"yui3-datatable-even {tdClass}\">{content}</td>'",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 103,
            "description": "Defines the default TH HTML template for the header content within the footer",
            "itemtype": "property",
            "name": "TMPL_th",
            "type": "String",
            "default": "'<th colspan=\"{colspan}\" class=\"{thClass}\">{content}</th>'",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 114,
            "description": "Defines the default TR HTML template for the footer",
            "itemtype": "property",
            "name": "TMPL_tr",
            "type": "String",
            "default": "'<tr>{th_content}{td_content}</tr>'",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 125,
            "description": "Defines the default TFOOT HTML template for the footer",
            "itemtype": "property",
            "name": "TMPL_tfoot",
            "type": "String",
            "default": "'<tfoot class=\"{footClass}\"><tr>{th_content}{td_content}</tr></tfoot>'",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 137,
            "description": "Defines the default TABLE HTML template for the \"fixed\" footer type ... i.e. with scrolling",
            "itemtype": "property",
            "name": "TMPL_table_fixed",
            "type": "String",
            "default": "'<table cellspacing=\"0\" aria-hidden=\"true\" class=\"{className}\"></table>'",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 155,
            "description": "Storage array of objects, each object represents a rendered \"cell or column\" within the\nfooter view.  The first element is typically a TH element (with a colspan), and the\nremaining elements are the TD's for each requested footer field.\n\nCreated and populated by the render() method",
            "itemtype": "property",
            "name": "node_cols",
            "type": "Array of Object hashes",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 171,
            "description": "Placeholder for subscriber event handles, used to destroy cleanly",
            "itemtype": "property",
            "name": "_subscr",
            "type": "{EventHandles} Array of eventhandles",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "private",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 182,
            "description": "DataTable instance that utilizes this footerview, derived from initializer \"config.host\"\nUsed to reference changes to DT modellist, and to retrieve the underlying \"data\"",
            "itemtype": "property",
            "name": "_dt",
            "type": "Y.DataTable",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "private",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 195,
            "description": "Called when view is initialized.  Stores reference to calling DataTable and\n creates listeners to link building or refreshing the footer back to the\n parent DataTable.",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 223,
            "description": "Default destructor method, cleans up the listeners that were created and\n removes and/or empties the created DOM elements for the footerView.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 239,
            "description": "Creates the DOM elements and attaches them to the footerView container.\n Reads the configuration parameters (i.e. from DataTable's config as \"footerConfig\")\n and structures a single TR element, with a leading TH in first column, and the\n requested TD elements following.",
            "itemtype": "method",
            "name": "render",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "return": {
                "description": "this"
            },
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 396,
            "description": "Fires after the footer has been created and rendered.",
            "itemtype": "event",
            "name": "renderFooter",
            "params": [
                {
                    "name": "none",
                    "description": ""
                }
            ],
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 406,
            "description": "Calculates a DataSet summary item defined in 'calc' for the given colKey, by\n  looping through the current \"data\" (i.e. Recordset).\n\n  Currently, the 'calc' is set to lowercase ...\n\nExample calc settings are as follows (for given 'colKey');\n\n{sum}\t\tCalculate the arithmetic sum of dataset\n{min}\t\tCalculate the minimum value within the dataset\n{max}\t\tCalculate the maximum value within the dataset\n{avg}\t\tCalculate the arithmetic average of the datset\n               (synonyms are {mean}, {average})\n\nAlso, non-dataset iterating calcs are;\n {row_count}\t Returns the number of rows in the dataset\n {col_count}  Returns the number of columns in the dataset (no visibility check)\n {date}\t\t Returns the current date (via dateFormat setting)\n {time}\t\t Returns the current time (via timeFormat setting)\n\nIf 'calc' argument is a function(), then call it (in the \"this\" context of this\n FooterView) with one argument, the DataTable.data property.\n\nDoesn't handle non-numeric calculations (i.e. `Date` or `String`)\n\nTODO:  Consider one call to this (with mult keys) for one loop thru only ...\n\n not a really possible use case, but ...\n whatif user tries to enter calc='this is a {sum} and {min} value' ??",
            "itemtype": "method",
            "name": "calcDatasetValue",
            "params": [
                {
                    "name": "colKey",
                    "description": "The column key name to be calculated",
                    "type": "String"
                },
                {
                    "name": "calc",
                    "description": "A recognizable calc setting from above",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the return value",
                "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 518,
            "description": "Calculates a DataSet summary item defined in 'calc' for the given colKey, by",
            "itemtype": "method",
            "name": "formatFootCell",
            "params": [
                {
                    "name": "col",
                    "description": "The column key name to be calculated",
                    "type": "String"
                },
                {
                    "name": "foot_col",
                    "description": "A recognizable calc setting from above",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the return value",
                "type": "Float"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 557,
            "description": "Refreshes the summary items in the footer view and populates the footer\n elements based on the current \"data\" contents.",
            "itemtype": "method",
            "name": "refreshFooter",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "access": "public",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 606,
            "description": "Fires after the footer has been recalculated and updated.",
            "itemtype": "event",
            "name": "refreshFooter",
            "params": [
                {
                    "name": "none",
                    "description": ""
                }
            ],
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 613,
            "description": "For scrollable tables only, adjusts the sizes of the TFOOT cells to match the widths\nof the THEAD cells.",
            "itemtype": "method",
            "name": "resizeFooter",
            "return": {
                "description": "this"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 660,
            "description": "Fires after the footer has been resized to match the parent DataTable",
            "itemtype": "event",
            "name": "resizeFooter",
            "params": [
                {
                    "name": "none",
                    "description": ""
                }
            ],
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 670,
            "description": "Method that builds a separate TABLE / TFOOT container outside of the Y-scrolling\n container and places the view \"container\" within this.\n\nThis is specifically required for a \"fixed\" footer ... i.e. with a scrolling DataTable,\nwhere the footer is expected to remain stationary as the records are scrolled through.\n\n NOTE: A bug exists where the viewFooter container (TFOOT) is improperly placed within\n       the y-scroller container (http://yuilibrary.com/projects/yui3/ticket/2531723)\n       This function is a workaround for that.",
            "itemtype": "method",
            "name": "_buildFixedFooter",
            "access": "private",
            "tagname": "",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 721,
            "description": "Flag indicating if the footer is desired to be \"fixed\" (i.e. non-scrolling, true) or floating with Datatable scrolling (false)",
            "itemtype": "attribute",
            "name": "fixed",
            "type": "boolean",
            "default": "false",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 728,
            "description": "Defines the TH properties for the footer row, the leftmost column (including optional colspan)",
            "itemtype": "attribute",
            "name": "heading",
            "type": "Object",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 735,
            "description": "A string template defining the contents of the TH column.  May include any non-set related fields, including `{row_count}`, `{col_count}`, `{date}`,`{time}`\n\nExample:\n\n    heading.content : 'Totals for {row_count} Orders as-of {date} :'",
            "itemtype": "attribute",
            "name": "heading.content",
            "type": "String",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 747,
            "description": "The number of columns from the DataTable columns that should be spanned for the TH in the footer",
            "itemtype": "attribute",
            "name": "heading.colspan",
            "type": "Integer",
            "default": "1",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 754,
            "description": "A CSS class name to be added to the TH element of the footer",
            "itemtype": "attribute",
            "name": "heading.className",
            "type": "String",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 761,
            "description": "An array of objects, one row per *desired* column of TD representing a summary from the dataset.\n\nOnly TD's with a row included in this array will be processed and rendered, otherwise any visible\n columns from the DataTable, that are not within a TH colspan, will be created as empty.",
            "itemtype": "attribute",
            "name": "columns",
            "type": "Array",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 771,
            "description": "The dataset \"key\" corresponding to the columns of the DataTable for this desired TD in the footer.",
            "itemtype": "attribute",
            "name": "columns.key",
            "type": "String",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 778,
            "description": "A string template defining the contents of this TD column in the footer.  May include any set-based (i.e. `{sum}`,`{min}`,`{max}`,`{avg}`) or non-set related fields, including `{row_count}`, `{col_count}`, `{date}`,`{time}`.\n<br/>The {average} and {mean} placeholders are equivalent to {avg} in this implementation.\n\nExample:\n\n    columns[2].content : '{sum}'",
            "itemtype": "attribute",
            "name": "columns.content",
            "type": "String",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 791,
            "description": "A CSS class name to be added to this TD element of the footer",
            "itemtype": "attribute",
            "name": "columns.className",
            "type": "String",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 799,
            "description": "Specifies a formatter to apply to the numeric field denoted in this TD column.  A formatter from the original DataTable columns can be specified.\n\nIf this attribute is set to null (or missing), the formatter from the DataTable column associated with the \"key\" (if any), will be used.\n\nIf this attribute is set to '', no formatting will be applied.",
            "itemtype": "attribute",
            "name": "columns.formatter",
            "type": "{String|Function}",
            "default": "null",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 811,
            "description": "Specifies a strftime format string to be applied for {date} entries, using Y.DataType.Date.format",
            "itemtype": "attribute",
            "name": "dateFormat",
            "type": "String",
            "default": "\"%D\"",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/dt_footerview.js",
            "line": 818,
            "description": "Specifies a strftime format string to be applied for {time} entries, using Y.DataType.Date.format",
            "itemtype": "attribute",
            "name": "timeFormat",
            "type": "String",
            "default": "\"%T\"",
            "class": "Y.FooterView",
            "module": "FooterView"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 35,
            "description": "Node for the most recent \"highlighted\" item, either TD or TR",
            "itemtype": "attribute",
            "name": "highlighted",
            "type": "{Node}",
            "default": "null",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 46,
            "description": "Node for the most recent \"selected\" item, either TD or TR",
            "itemtype": "attribute",
            "name": "selected",
            "type": "{Node}",
            "default": "null",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 57,
            "description": "Set the current mode for highlighting, either for a single TD (as \"cell\") or for a\nfull TR (as \"row\")",
            "itemtype": "attribute",
            "name": "highlightMode",
            "type": "{String}",
            "default": "null",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 73,
            "description": "Set the current mode for indicating selections, either for a single TD (as \"cell\") or for a\nfull TR (as \"row\")",
            "itemtype": "attribute",
            "name": "selectionMode",
            "type": "{String}",
            "default": "null",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 90,
            "description": "Attribute that holds the selected TR's associated with either the selected \"rows\" or the\n TR's that are related to the selected \"cells\", duplicates are excluded.\n\nOn input, accepts an Array of record indices for rows that should be set as \"selected\".\n(Please refer to method [_setSelectedRows](#method__setSelectedRows))\n\n         dt.set('selectedRows',[ 1, 5, 9, 11]);\n         // selects the 2nd, 6th, 10th and 12th records\n\nFor reading this setting, it returns an Array of objects containing {tr,record,recordIndex} for each\n selected \"row\"; where \"tr\" is a Y.Node instance and \"record\" is the Model for the TR and \"recordIndex\" is the\n record index within the current dataset.\n(Please refer to method [_getSelectedRows](#method__getSelectedRows))",
            "itemtype": "attribute",
            "name": "selectedRows",
            "type": "{Array}",
            "default": "[]",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 116,
            "description": "Attribute that holds the selected TD's associated with the selected \"cells\", or related to the\n selected \"rows\" if that is the `selectionMode`.\n\n On input, an Array can be provided to pre-set as \"selected\" cells, defined as each element being\n in {record,column} format; where \"record\" is the record index (or clientId) and \"column\" is either\n the column index or the key/name for the column.\n (Please see method [_setSelectedCells](#method__setSelectedCells) for reference).\n\n         dt.set('selectedCells',[{record:0,column:'fname'}, {record:187,column:7} ]);\n\n For reading the selected cells (via \"get\"), an array is returned with contains {Object} elements\n that describe the row / column combinations of each currently selected cell.\n (Please see method [_getSelectedCells](#method__getSelectedCells) for full information on the returned objects).",
            "itemtype": "attribute",
            "name": "selectedCells",
            "type": "{Array}",
            "default": "[]",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 142,
            "description": "Flag to allow either single \"selections\" (false) or multiple selections (true).\nFor Macintosh OSX-type systems the modifier key \"Cmd\" is held for multiple selections,\n and for Windows or Linux type systems the modifier key is \"Ctrl\".",
            "itemtype": "attribute",
            "name": "selectionMulti",
            "type": "{Boolean}",
            "default": "false",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 161,
            "itemtype": "property",
            "name": "_selections",
            "type": "Array",
            "default": "null",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 170,
            "description": "Holder for the classname for the \"highlight\" TR or TD",
            "itemtype": "property",
            "name": "_classHighlight",
            "type": "String",
            "default": "null",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 180,
            "description": "Holder for the classname for the \"selected\" TR or TD",
            "itemtype": "property",
            "name": "_classSelected",
            "type": "String",
            "default": "null",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 190,
            "description": "Holder for the most recent \"click\" event modifier keys from last click,\n used for assessing \"multi\" selections.\n\nContains properties;  altKey, ctrlKey, shiftKey, metaKey, button and which\n\nFilled initially by .initializer and on each Table \"click\".",
            "itemtype": "property",
            "name": "_clickModifiers",
            "type": "Object",
            "default": "null",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 210,
            "description": "Initializes and sets initial bindings for the datatable-selection module",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 219,
            "description": "Destructor to clean up bindings.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 234,
            "description": "Method to enable the datatable-selection module",
            "itemtype": "method",
            "name": "disableSelection",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 244,
            "description": "Method to disable the datatable-selection module (cleans up listeners and user interface).",
            "itemtype": "method",
            "name": "disableSelection",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 254,
            "description": "Returns the Column object (from the original \"columns\") associated with the input TD Node.",
            "itemtype": "method",
            "name": "getColumnByTd",
            "params": [
                {
                    "name": "cell",
                    "description": "Node of TD for which column object is desired",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "column The column object entry associated with the desired cell",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 267,
            "description": "Returns the column \"key\" or \"name\" string for the requested TD Node",
            "itemtype": "method",
            "name": "getColumnNameByTd",
            "params": [
                {
                    "name": "cell",
                    "description": "Node of TD for which column name is desired",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "colName Column name or key name",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 290,
            "description": "Utility method that will return all selected TD Nodes for the current \"selected\" set.\nIf selections include a TR row, all child TD's from the row are included.",
            "itemtype": "method",
            "name": "getSelectedTds",
            "return": {
                "description": "tds Array of selected TD's as Nodes",
                "type": "Array"
            },
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 312,
            "description": "Removes all \"selected\" classes from DataTable and resets internal selections counters and \"selected\" attribute.",
            "itemtype": "method",
            "name": "clearSelections",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 323,
            "description": "Removes all \"highlight\" classes from DataTable and resets `highlighted` attribute.",
            "itemtype": "method",
            "name": "clearHighlighted",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 333,
            "description": "Removes all highlighting and selections on the DataTable.",
            "itemtype": "method",
            "name": "clearAll",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 347,
            "description": "Cleans up listener event handlers and static properties.",
            "itemtype": "method",
            "name": "_unbindSelector",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 367,
            "description": "Sets listeners and initial class names required for this \"datatable-selector\" module\n\nNote:  Delegated \"click\" listeners are defined in _setSelectedMode and _setHightlightMode methods",
            "itemtype": "method",
            "name": "_bindSelector",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 400,
            "description": "Method that updates the \"highlighted\" classes for the selection and unhighlights the prevVal",
            "itemtype": "method",
            "name": "_highlightChange",
            "params": [
                {
                    "name": "o",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 410,
            "description": "Method that updates the \"selected\" classes for the selection and un-selects the prevVal.\nThis method works with multiple selections (via ATTR `selectionMulti` true) by pushing\nthe current selection to the this._selections property.",
            "itemtype": "method",
            "name": "_selectedChange",
            "params": [
                {
                    "name": "o",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 467,
            "itemtype": "event",
            "name": "selected",
            "deprecated": true,
            "params": [
                {
                    "name": "obj",
                    "description": "Return object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "ochange",
                            "description": "Change event object passed from attribute 'selected'",
                            "type": "Object"
                        },
                        {
                            "name": "record",
                            "description": "DataTable record (Y.Model) instance for the selection",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 475,
            "description": "Event that fires on every DataTable \"select\" event, returns current selections, either cells or rows depending\non the current \"selectionMode\".",
            "itemtype": "event",
            "name": "selection",
            "params": [
                {
                    "name": "obj",
                    "description": "Return object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "selectionMode",
                            "description": "Current setting of attribute [selectionMode](#attr_selectionMode)",
                            "type": "Object"
                        },
                        {
                            "name": "cells",
                            "description": "Returns the current setting of the attribute [selectedCells](#attr_selectedCells)",
                            "type": "Object"
                        },
                        {
                            "name": "rows",
                            "description": "Returns the current setting of the attribute [selectedRows](#attr_selectedRows)",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 486,
            "description": "Called when a \"range\" selection is detected (i.e. SHIFT key held during click) that selects\na range of TD's or TR's (depending on [selectionMode](#attr_selectionMode) setting.",
            "itemtype": "method",
            "name": "_processRange",
            "params": [
                {
                    "name": "o",
                    "description": "Last clicked TD of range selection",
                    "type": "Node"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 556,
            "description": "Returns the current settings of row selections, includes multiple selections.  If the\ncurrent `selectionMode` is \"cell\" mode, this function returns the unique \"records\" associated with\nthe selected cells.\n\n**Returned** `rows` {Array} of objects in format;\n<ul>\n  <li>`rows.tr` {Node} Node instance of the TR that was selected</li>\n  <li>`rows.record` {Model} The Model associated with the data record for the selected TR</li>\n  <li>`rows.recordIndex` {Integer} The record index of the selected TR within the current \"data\" set</li>\n</ul>",
            "itemtype": "method",
            "name": "_getSelectedRows",
            "return": {
                "description": "rows Array of selected \"rows\" as objects in {tr,record,recordIndex} format",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 594,
            "description": "Getter method that returns an Array of the selected cells in record/column coordinate format.\nIf rows or TR elements were selected, it adds all of the row's child TD's.\n\n**Returned** `cells` {Array} of objects in format;\n<ul>\n  <li>`cells.td` {Node} TD Node for this cell.</li>\n  <li>`cells.record` {Model} Record for this cell as a Y.Model</li>\n  <li>`cells.recordIndex` {Integer} Record index for this cell in the current \"data\" set</li>\n  <li>`cells.column` {Object} Column for this cell defined in original \"columns\" DataTable attribute</li>\n  <li>`cells.columnName` {String} Column name or key associated with this cell</li>\n  <li>`cells.columnIndex` {Integer} Column index of the column, within the \"columns\" data</li>\n</ul>",
            "itemtype": "method",
            "name": "_getSelectedCells",
            "return": {
                "description": "cells The selected cells in {record,recordIndex,column,columnName,columnIndex} format",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 654,
            "description": "Setter method for attribute `selectedCells` that takes an array of cells as input and sets them\nas the current selected set with appropriate visual class.",
            "itemtype": "method",
            "name": "_setSelectedCells",
            "params": [
                {
                    "name": "val",
                    "description": "The desired cells to set as selected, in {record:,column:} format",
                    "type": "Array",
                    "props": [
                        {
                            "name": "record",
                            "description": "Record for this cell as either record index or record clientId",
                            "type": "String|Number"
                        },
                        {
                            "name": "column",
                            "description": "Column for this cell as either the column index or \"key\" or \"name\"",
                            "type": "String|Number"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 687,
            "description": "A setter method for attribute `selectedRows` that takes as input an array of desired DataTable\nrecord indices to be \"selected\", clears existing selections and sets the \"selected\" records and\nhighlights the TR's",
            "itemtype": "method",
            "name": "_setSelectedRows",
            "params": [
                {
                    "name": "val",
                    "description": "recIndices Array of record indices desired to be set as selected.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "records Array of DataTable records (Y.Model) for each selection chosen",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 711,
            "description": "Method is fired BEFORE a \"reset\" action takes place on the \"data\", usually related to a column sort.\nThis is used to preserve the pre-sorted data (temporarily in _selections) prior to sorting so that\nwe can reapply the \"selections\" after the sort is completed (see [_afterResetDataSelect](#method__afterResetDataSelect))",
            "itemtype": "method",
            "name": "_beforeResetDataSelect",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 756,
            "description": "Method is fired AFTER a \"reset\" action takes place on the \"data\", usually related to a column sort.\nThis function reads the pre-sorted selections that were stored by  [_beforeResetDataSelect](#method__beforeResetDataSelect)\ntemporarily in this._selections.\n\nDepending upon the current \"selectionMode\", either post-sorted TBODY selections are re-applied, by determining either\nthe TR's (from the Model data) or the TD's (from the Model and Column Index data).",
            "itemtype": "method",
            "name": "_afterResetDataSelect",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 796,
            "description": "Method used to derive from the clicked selection, either the TR or TD of the selection, and\nreturns the current `selectionMode` or `highlightMode` Node (based on the setting of prefix).\n\nThis method adds the required class, and if erasePrev is true, removes the class from the prior setting.",
            "itemtype": "method",
            "name": "_processNodeAction",
            "params": [
                {
                    "name": "o",
                    "description": "Attribute change event object",
                    "type": "Object"
                },
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "erasePrev",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "node Returned target Y.Node, either TR or TD based upon current `selectionMode` or `highlightMode`",
                "type": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 840,
            "description": "Method removes the specified `type` CSS class from all nodes within the TBODY data node.",
            "itemtype": "method",
            "name": "_clearAll",
            "params": [
                {
                    "name": "type",
                    "description": "Class name to remove from all nodes attached to TBODY DATA",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 852,
            "description": "Setter for `highlightMode` attribute, removes prior event handle (if exists) and defines\na new delegated \"mouseover\" handler that updates the `highlighted` attribute.\n\nA change to this setting clears all prior highlighting.",
            "itemtype": "method",
            "name": "_setHighlightMode",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 874,
            "description": "Setter for `selectionMode` attribute, removes prior event handle (if exists) and defines\na new delegated \"click\" handler that updates the `selected` attribute.\n\nA change to this setting clears all prior selections.",
            "itemtype": "method",
            "name": "_setSelectionMode",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/gallery-datatable-selection.js",
            "line": 909,
            "description": "Helper method to clear DOM \"selected\" text or ranges",
            "itemtype": "method",
            "name": "_clearDOMSelection",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Selection",
            "module": "DataTable",
            "submodule": "Selection"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 32,
            "description": "Placeholder for calculated # of pages required",
            "itemtype": "property",
            "name": "_npages",
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 41,
            "description": "Placeholder for Event subscribers created by this model, kept for detaching on destroy.",
            "itemtype": "property",
            "name": "_subscr",
            "type": "{Array}",
            "access": "protected",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 50,
            "description": "Creates self-listeners to recalculate paginator settings on items / itemsPerPage\n changes.  Also sets listener to track 'lastPage' changes.",
            "itemtype": "method",
            "name": "initializer",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 71,
            "description": "Default destructor method, cleans up the listeners that were created.",
            "itemtype": "method",
            "name": "destructor",
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 84,
            "description": "Method responds to changes to \"page\" (via `pageChange` attribute change), validates the change compared to the\n current paginator settings, and stores the prior page in \"lastPage\".\n\nIf a page change is invalid (i.e. less than 1, non-numeric or greater than `totalPages` the change is prevented.",
            "itemtype": "method",
            "name": "_changePage",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "return": {
                "description": "Nothing"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 108,
            "description": "Method to calculate the current paginator settings, specifically the\n number of pages required, including a modulus calc for extra records requiring a final page.\n\nThis method resets the `page` to 1 (first page) upon completion.",
            "itemtype": "method",
            "name": "_recalcPagnParams",
            "return": {
                "description": "Indicating the \"success\" or failure of recalculating the pagination state.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 133,
            "description": "Getter for returning the start index for the current `page`",
            "itemtype": "method",
            "name": "_getItemIndexStart",
            "return": {
                "description": "Index of first item on the current `page`",
                "type": "Integer"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 143,
            "description": "Getter for returning the ending index for the current `page`",
            "itemtype": "method",
            "name": "_getItemIndexEnd",
            "return": {
                "description": "Index of the last item on the current `page`",
                "type": "Integer"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 155,
            "description": "Fires after the `page` attribute is changed",
            "itemtype": "event",
            "name": "pageChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 160,
            "description": "Fires after the `itemsPerPage` attribute is changed",
            "itemtype": "event",
            "name": "itemsPerPageChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 165,
            "description": "Fires after the `totalItems` attribute is changed",
            "itemtype": "event",
            "name": "totalItemsChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 170,
            "description": "Fires after the `totalPages` attribute is changed",
            "itemtype": "event",
            "name": "totalPagesChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 175,
            "description": "Fires after the `lastPage` attribute is changed",
            "itemtype": "event",
            "name": "lastPageChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 184,
            "description": "Total number of items used by this paginator-model.",
            "itemtype": "attribute",
            "name": "totalItems",
            "type": "{Integer}",
            "default": "null",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 196,
            "description": "Number of items per page for this paginator.",
            "itemtype": "attribute",
            "name": "itemsPerPage",
            "type": "{Integer}",
            "default": "null",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 208,
            "description": "The current page selected for this paginator-model.\n\nThis is intended as the **primary** change parameter to be .set() by the user, for interacting\nwith the Paginator Model.",
            "itemtype": "attribute",
            "name": "page",
            "type": "{Integer}",
            "default": "1",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 223,
            "description": "The last active `page` that was selected, this is populated by a `pageChange` listener on the Model.",
            "itemtype": "attribute",
            "name": "lastPage",
            "type": "{Integer}",
            "default": "null",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 235,
            "description": "The total number of pages required to complete this pagination state (based upon `totalItems` and\n`itemsPerPage`, specifically).\n\nThis attribute is set / maintained by the method [_recalcPagnParams](#method__recalcPagnParams) and\nshouldn't be set by the user.",
            "itemtype": "attribute",
            "name": "totalPages",
            "type": "Integer",
            "default": "null",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 252,
            "description": "The index for the starting item on the current `page` within the pagination state.\n\nThis attribute is calculated on the fly in a getter method [_getItemIndexStart](#method__getItemIndexStart) and\nshould not be \"set\" by the user, as it will be disregarded.",
            "itemtype": "attribute",
            "name": "itemIndexStart",
            "type": "Integer",
            "default": "null",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 268,
            "description": "The index for the ending item on the current `page` within the pagination state.\n\nThis attribute is calculated on the fly in a getter method [_getItemIndexEnd](#method__getItemIndexEnd) and\nshould not be \"set\" by the user, as it will be disregarded.",
            "itemtype": "attribute",
            "name": "itemIndexEnd",
            "type": "Integer",
            "default": "null",
            "class": "Y.PaginatorModel",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 381,
            "description": "Default HTML content to be used as basis for Paginator.  This default is only used if the paginatorTemplate\nattribute is unused OR the container does not contain the HTML template.\n\nThe paginator HTML content includes replacement tokens throughout.\n\nThe DEFAULT setting is;\n\n        <a href=\"#\" data-pglink=\"first\" class=\"{pageLinkClass}\" title=\"First Page\">First</a> |\n        <a href=\"#\" data-pglink=\"prev\" class=\"{pageLinkClass}\" title=\"Prior Page\">Prev</a> |\n        {pageLinks}\n        | <a href=\"#\" data-pglink=\"next\" class=\"{pageLinkClass}\" title=\"Next Page\">Next</a> |\n        <a href=\"#\" data-pglink=\"last\" class=\"{pageLinkClass}\" title=\"Last Page\">Last</a>",
            "itemtype": "property",
            "name": "TMPL_PAGINATOR",
            "type": "String",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 405,
            "description": "Default HTML content that will be used to prepare individual links within the Paginator and inserted\nat the location denoted **{pageLinks}** replacement token in the template.\n\nThe DEFAULT setting is;\n\n       <a href=\"#\" data-pglink=\"{page}\" class=\"{pageLinkClass}\" title=\"Page {page}\">{page}</a>",
            "itemtype": "property",
            "name": "TMPL_LINK",
            "type": "{String}",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 423,
            "description": "Default HTML template for the Rows Per Page SELECT box signified by the **{selectRowsPerPage}** replacement toke\nwithin the paginator template.\n\nThe DEFAULT setting is;\n\n       <select class=\"{selectRPPClass}\"></select>",
            "itemtype": "property",
            "name": "TMPL_selectRPP",
            "type": "String",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 436,
            "description": "Default HTML template for the Page SELECT box signified by the **{selectPage}** replacement token with the\npaginator template.\n\nThe DEFAULT setting is;\n\n       <select class=\"{selectPageClass}\"></select>",
            "itemtype": "property",
            "name": "TMPL_selectPage",
            "type": "String",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 449,
            "description": "Default HTML template for the \"Rows Per Page\" INPUT[text] control signified by the **{inputRowsPerPage}** replacement\ntoken within the paginator template.\n\nThe DEFAULT setting is;\n\n       <input type=\"text\" class=\"{inputRPPClass}\" value=\"{itemsPerPage}\"/>",
            "itemtype": "property",
            "name": "TMPL_inputRPP",
            "type": "String",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 462,
            "description": "Default HTML template for the \"Page\" INPUT[text] control signified by the **{inputPage}** replacement token with the\npaginator template.\n\nThe DEFAULT setting is;\n\n       <input type=\"text\" class=\"{inputPageClass}\" value=\"{page}\"/>",
            "itemtype": "property",
            "name": "TMPL_inputPage",
            "type": "String",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 476,
            "description": "A public property, provided as a convenience property, equivalent to the \"model\" attribute.",
            "itemtype": "property",
            "name": "model",
            "type": "Y.PaginatorModel",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 488,
            "description": "Placeholder property to store the initial container HTML for used later in the\n render method.  This property is populated by the View initializer.",
            "itemtype": "property",
            "name": "_pagHTML",
            "access": "protected",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 497,
            "description": "Class placeholders for UI elements",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 512,
            "description": "Holder for Event subscribers created by this View, saved so they can be cleaned up later.",
            "itemtype": "property",
            "name": "_subscr",
            "type": "Array",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 523,
            "description": "Helper function, because I was too lazy to figure out how to get widget getClassName working",
            "itemtype": "method",
            "name": "_myClassName",
            "params": [
                {
                    "name": "String",
                    "description": "variable number of strings, to be concatenated"
                }
            ],
            "return": {
                "description": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 541,
            "description": "Initializer sets up classes and the initial container and HTML templating for this View.",
            "itemtype": "method",
            "name": "initializer",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 598,
            "description": "Setup listeners on this View, specifically on all UI elements and\n \"most importantly\", listen to \"pageChange\" on the underlying Model.",
            "itemtype": "method",
            "name": "_bindUI",
            "return": {
                "description": "this"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 636,
            "description": "Default destructor method, cleans up the listeners that were created and\n cleans up the view contents.",
            "itemtype": "method",
            "name": "destructor",
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 651,
            "description": "Renders the current settings of the Paginator using the supplied HTML content from the\nfor the paginator template and Y.Lang.sub for replacement of tokens and of Model attributes.\n\nNOTE: The render method is not called on every page \"click\", but is called if the Model changes\n`totalItems` or `itemsPerPage`.\n\n<h6>Recognized tokens:</h6>\nRecognizeable tokens are supported, specifically as *placeholders* within the html template where generated content\ncan be inserted and ultimately rendered in the view container.\n\nTokens replaced within this method include all of the PaginatorModel attributes;\n\n   **{page}**, **{totalItems}**, **{itemsPerPage}**, **{lastPage}**, **{totalPages}**, **{itemIndexStart}**, **{itemIndexEnd}**\n\nAdditionally, specific tokens intended for view HTML construction and recognized by PaginatorView are;\n<ul>\n   <li><b>{pageLinks}</b> : The placeholder within the html template where the View-generated page links will\n   <br/>be inserted via a loop over all pages (DEFAULT: see <a href=\"#property_TMPL_LINK\">TMPL_LINK</a>)</li>\n   <li><b>{inputPage}</b> : An INPUT[type=text] box which the view listens for change events on (Default: see <a href=\"#property_TMPL_inputPage\">TMPL_inputPage</a>)</li>\n   <li><b>{selectRowsPerPage}</b> : A SELECT type pulldown that will be populated with the <a href=\"#attr_pageOptions\">pageOptions</a>\narray <br/>of \"Rows per Page\" selections (Default: see <a href=\"#property_TMPL_selectRPP\">TMPL_selectRPP</a>)</li>\n   <li><b>{inputRowsPerPage}</b> : An INPUT[type=text] box what will be listened to for changes to \"Rows per Page\" (Default: see <a href=\"#property_TMPL_inputRPP\">TMPL_inputRPP</a>)</li>\n   <li><b>{selectPage}</b> (Not implemented at this time!)</li>\n   <li><b>{pageStartIndex}</b> : Represents the starting index for a specific \"page\" (intended for use within <a href=\"#attr_pageLinkTemplate\">pageLinkTemplate</a> )</li>\n   <li><b>{pageEndIndex}</b> : Represents the ending index for a specific \"page\" (intended for use within <a href=\"#attr_pageLinkTemplate\">pageLinkTemplate</a> )</li>\n</ul>\n\nAnd if that wasn't enough, the CSS class names supported by this view are also provided via tokens as;\n   **{pagClass}**, **{pageLinkClass}**, **{inputPageClass}**, **{selectRPPClass}**, **{selectPageClass}**, **{inputRPPClass}**\n\n\nThis method utilizes the Y.substitute tool (with recursion) for token replacement.\n\nThe `container` visibility is disabled during construction and insertion of DOM elements into the `container` node.\n\nThis method fires the `render` event, for View listeners.",
            "itemtype": "method",
            "name": "render",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 768,
            "description": "Main handler that accomodates Page changes and updates visual cues for highlighting\n the selected page link and the active Page selector link list.\n\nThis method also fires the View's \"pageChange\" event.\n\nNOTE: This method is *private* because page changes should be made by the user at\nthe Model level (Model.set('page',...) and not using the _processPageChange method.",
            "itemtype": "method",
            "name": "_processPageChange",
            "params": [
                {
                    "name": "cpage",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 874,
            "description": "Helper method to calculate offset either side of Selected Page link\n for abbreviated Page List.\n\n Called by _processPageChange",
            "itemtype": "method",
            "name": "_calcOffset",
            "params": [
                {
                    "name": "cpage",
                    "description": "Current page number",
                    "type": "Integer"
                },
                {
                    "name": "offset",
                    "description": "Number of links both sides of page number to return for (usually 1)",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "containing left {Integer} and right {Integer} properties",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 894,
            "description": "Method that toggles the visibility of Page Link selector fields based upon\ntheir data-pglink attribute setting.\n\n Called by _processPageChange",
            "itemtype": "method",
            "name": "_disablePageSelector",
            "params": [
                {
                    "name": "linkSel",
                    "description": ""
                },
                {
                    "name": "visible",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 925,
            "description": "Setter for the \"model\" attribute, that for convenience also sets a public property to this View.",
            "itemtype": "method",
            "name": "_setModel",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 940,
            "description": "Handler responds to Model's `pageChange` event\n\n Listener set in _bindUI",
            "itemtype": "method",
            "name": "_modelPageChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 955,
            "description": "Handler responds to Model's `itemsPerPageChange` event\n\n Listener set in _bindUI",
            "itemtype": "method",
            "name": "_modelStateChange",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 970,
            "description": "Method fired after the Paginator View is rendered,\n  so that the SELECT[rowsPerPage] control can be updated\n\n Listener set in _bindUI",
            "itemtype": "method",
            "name": "_updateRPPSelect",
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1018,
            "description": "Method that responds to changes in the SELECT box for \"page\"",
            "itemtype": "method",
            "name": "_updatePageSelect",
            "access": "private",
            "tagname": "",
            "beta": 1,
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1036,
            "description": "Handler responding to INPUT[text] box page change.\n\nListener set in _bindUI",
            "itemtype": "method",
            "name": "_inputChangePage",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1057,
            "description": "Handler responding to a Page Selector \"click\" event.  The clicked Node is\nreviewed for its data-pglink=\"\" setting, and processed from that.\n\nChanged page is then sent back to the Model, which reprocesses the\n paginator settings (i.e. indices) and fires a `pageChange` event.\n\n Listener set in _bindUI",
            "itemtype": "method",
            "name": "_clickChangePage",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1104,
            "description": "Handler that responds to SELECT changes for no. of rows per page\n\nListener set in _bindUI",
            "itemtype": "method",
            "name": "_selectChangeRowOptions",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1125,
            "description": "Fires after the Paginator has been completely rendered.",
            "itemtype": "event",
            "name": "render",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1130,
            "description": "Fires after the _processPageChange method has updated the pagination state.",
            "itemtype": "event",
            "name": "pageChange",
            "params": [
                {
                    "name": "state",
                    "description": "The PaginatorModel `getAttrs()` \"state\" after updating to the current page as an object.",
                    "type": "Object"
                }
            ],
            "since": "3.5.0",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1139,
            "description": "The default set of attributes which will be available for instances of this class",
            "itemtype": "property",
            "name": "ATTRS",
            "type": "Object",
            "static": 1,
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1148,
            "description": "The base PaginatorModel that serves as data / change provider for this View.",
            "example": [
                "\n     paginator:  new Y.PaginatorModel({\n         itemsPerPage:  250\n     }),\n     OR\n \tpaginator:  myPagModel // where myPagModel is an instance previously created ..."
            ],
            "itemtype": "attribute",
            "name": "model",
            "default": "null",
            "type": "{Y.PaginatorModel}",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1168,
            "description": "The container holder for the contents of this View.  Can be entered either as\na Y.Node instance or as a DOM \"id\" attribute (if prepended by \"#\").",
            "example": [
                "\n      container: Y.one(\"#myDiv\"),\n      OR\n      container: \"#myDiv\"\n\nNOTE: If the container node contains HTML <b>it will be used as the paginatorTemplate</b>"
            ],
            "itemtype": "attribute",
            "name": "container",
            "default": "null",
            "type": "{Node|String}",
            "required": 1,
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1189,
            "description": "An array that will be used to populate the rows per page SELECT box ( using string replacement \"{selectRowsPerPage}\" or\nclass selector \"yui3-pagview-select-rowsperpage\" ).",
            "itemtype": "attribute",
            "name": "pageOptions",
            "type": "{Array}",
            "default": "[ 10, 20, 'All' ]",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1202,
            "description": "A string that defines the Paginator HTML contents.  Can either be entered as a {String} including replacement parameters\nor as a {Node} instance whose contents will be read via .getHTML() or a DOM \"id\" element (indicated by '#' in first character)\n<br/><br/>\nTo disable creation of any template (in order to do your own replacements of the template), set this to ''.",
            "example": [
                "\n      paginatorTemplate:  '<div data-pglink=\"first\">FIRST</div> {pageLinks} <div data-pglink=\"last\">LAST</div>',\n      paginatorTemplate:  Y.one('#script-id-tmpl'),\n      paginatorTemplate:  Y.one('#script-id-tmpl').getHTML(),\n      paginatorTemplate:  '#script-id-tmpl',   // where"
            ],
            "itemtype": "attribute",
            "name": "paginatorTemplate",
            "type": "{Node|String}",
            "default": "See TMPL_PAGINATOR static property",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1224,
            "description": "Defines the HTML template to be used for each individual page within the Paginator.  This can be used along\nwith replacement tokens to create UI elements for each page link.  The template is used to construct the\n`{pageLinks}` replacement token with the paginator body.\n\nRecognized replacement tokens most appropriate to this attribute are `{page}`, `{pageStartIndex}` and\n`{pageEndIndex}`.\n\nA few examples of this template are listed below;",
            "example": [
                "\n       pageLinkTemplate: '<a href=\"#\" data-pglink=\"{page}\" class=\"\" title=\"Page No. {page}\">{page}</a>'"
            ],
            "itemtype": "attribute",
            "name": "pageLinkTemplate",
            "type": "String",
            "default": "See TMPL_LINK static property",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1252,
            "description": "Used to set the maximum number of page links that will be displayed for individual pages within `{pageLinks}`.\nThis is the primary attribute to use to setup **abbreviated page links**, to avoid a long line of page links\nthat travel across the page!\n\nSetting this to some number less than the total number of pages will begin abbreviating the links.\n<br/>(See also attributes [`linkListOffset`](#attr_linkListOffset) and [`pageLinkFiller`](#attr_pageLinkFiller), which work in conjunction with this attribute).",
            "itemtype": "attribute",
            "name": "maxPageLinks",
            "type": "Integer",
            "default": "9999",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1269,
            "description": "Setting that represents the number of links adjacent to the current page that should be displayed for instances where\nan *abbreviated* page link list is desired.\n<br/>(See [maxPageLinks](#attr_maxPageLinks) and [pageLinkFiller](#attr_pageLinkFiller) attributes).\n\nFor example, a setting of this attribute to 1, will result in 3 page links (current page plus 1 each side),\n<br/>likewise a setting of 2, will results in 5 page links in the center of the paginator, etc.",
            "itemtype": "attribute",
            "name": "linkListOffset",
            "type": "Integer",
            "default": "1",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1286,
            "description": "Setting the the \".. more\" indicator to be used specifically for *abbreviated* page link lists.\n<br/>(See [maxPageLinks](#attr_maxPageLinks) and [linkListOffset](#attr_linkListOffset) attributes).",
            "itemtype": "attribute",
            "name": "pageLinkFiller",
            "type": "String",
            "default": "'...'",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1299,
            "description": "Flag to indicate whether the first page link **within the `{pageLinks}` template** is to be displayed or not.\n<br/>Specifically intended for *abbreviated* page link lists (See [maxPageLinks](#attr_maxPageLinks) attribute).\n\nFor Example;\n<br/>If our paginator state currently has 9 pages, and the current page is 5, if `alwaysShowLast:false` and `alwaysShowFirst:false`\n   the link list will resemble;<br/>First | Prev | ... 4 5 6 ... | Next | Last\n\n   Likewise, with `'alwaysShowLast:true` (and alwaysShowFirst:true) the link list will resemble;\n<br/>First | Prev | 1 ... 4 5 6 ... 9 | Next | Last",
            "itemtype": "attribute",
            "name": "alwaysShowFirst",
            "type": "Boolean",
            "default": "false",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1319,
            "description": "Flag to indicate whether the last page link **within the `{pageLinks}` template** is to be displayed or not.\n<br/>Specifically intended for *abbreviated* page link lists (See [maxPageLinks](#attr_maxPageLinks) attribute).\n\nSee `alowsShowFirst` for an example.",
            "itemtype": "attribute",
            "name": "alwaysShowLast",
            "type": "Boolean",
            "default": "false",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1334,
            "description": "Not implemented at this time.",
            "itemtype": "attribute",
            "name": "selectPageFormat",
            "type": "String",
            "default": "'Page {page}'",
            "beta": 1,
            "class": "Y.PaginatorView",
            "module": "DataTable"
        },
        {
            "file": "gallery-js/paginator-view.js",
            "line": 1346,
            "description": "Flag indicating whether \"circular\" behavior of the Paginator View is desired.  If `true` the paginator\nwill stop \"disabling\" First|Previous or Next|Last toggling and will continue at either 1st page or last\npage selections.  (i.e. when on *last* page, a *next* click will return to page 1)",
            "itemtype": "attribute",
            "name": "circular",
            "type": "Boolean",
            "default": "false",
            "class": "Y.PaginatorView",
            "module": "DataTable"
        }
    ]
}